/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for private data, allowing users to only access their own information.
 * Public data (market prices, feedback) is readable by all, but write access may be restricted or require authentication.
 *
 * Data Structure:
 * - User profiles are stored in `/users/{userId}`.
 * - User-specific data (fields, expenses, tasks, produce listings) is nested under `/users/{userId}`.
 * - Market prices are stored in the top-level `/marketPrices` collection.
 * - User Feedback is stored in the top-level `/feedbacks` collection.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own data.
 * - Listing of user documents and subcollections is restricted to the owner.
 * - Market prices are publicly readable but writes are disallowed in this prototype.
 * - Feedback can be created by authenticated users.
 *
 * Denormalization for Authorization:
 * - User-owned documents contain a `userId` field that MUST match the `userId` in the path. This ensures authorization independence and avoids costly `get()` calls.
 *
 * Structural Segregation:
 * - Private user data and public market data are stored in separate collections to simplify security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, and delete their own profile.
     * @deny (create) - User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot get, update, or delete the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to field data for a specific user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) - User with ID 'user123' can create a field under their profile.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, and delete their own field data.
     * @deny (create) - User with ID 'user456' cannot create a field under the profile of user 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot get, update, or delete field data for user 'user123'.
     * @principle Enforces document ownership and validates the 'userId' field.
     */
    match /users/{userId}/fields/{fieldId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to expense data for a specific user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User with ID 'user123' can create an expense record under their profile.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, and delete their own expense records.
     * @deny (create) - User with ID 'user456' cannot create an expense record under the profile of user 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot get, update, or delete expense records for user 'user123'.
     * @principle Enforces document ownership and validates the 'userId' field.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to task data for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User with ID 'user123' can create a task under their profile.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, and delete their own tasks.
     * @deny (create) - User with ID 'user456' cannot create a task under the profile of user 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot get, update, or delete tasks for user 'user123'.
     * @principle Enforces document ownership and validates the 'userId' field.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to growth data for a specific field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) - User with ID 'user123' can create growth data for their field.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, and delete their own growth data.
     * @deny (create) - User with ID 'user456' cannot create growth data under the field of user 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot get, update, or delete growth data for user 'user123'.
     * @principle Enforces document ownership through hierarchical path and 'fieldId' validation.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.fieldId == fieldId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.fieldId == resource.data.fieldId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to market price data.  Writes are disallowed in this prototype.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) - Any user can read market price data.
     * @deny (create, update, delete) - No one can create, update, or delete market price data (for now).
     * @principle Grants public read access but restricts write access.
     */
    match /marketPrices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to produce listings created by a user.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) - User with ID 'user123' can create a produce listing under their profile.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, and delete their own produce listings.
     * @deny (create) - User with ID 'user456' cannot create a produce listing under the profile of user 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot get, update, or delete produce listings for user 'user123'.
     * @principle Enforces document ownership and validates the 'userId' field.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants authenticated users the ability to submit feedback.
     * @path /feedbacks/{feedbackId}
     * @allow (create) - Any authenticated user can create a feedback entry.
     * @allow (get, list) - Any user can read feedback.
     * @deny (update, delete) - No one can update or delete feedback (for now).
     * @principle Allows authenticated users to create feedback entries.
     */
    match /feedbacks/{feedbackId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if false;
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of the resource and it already exists
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}