/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *              with a publicly readable collection for market prices.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user.
 * - /users/{userId}/fields/{fieldId}: Field data owned by a user.
 * - /users/{userId}/expenses/{expenseId}: Expense records owned by a user.
 * - /users/{userId}/tasks/{taskId}: Tasks owned by a user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Growth data for a specific field, owned by the user.
 * - /marketPrices/{marketPriceId}: Market price data, publicly readable.
 * - /users/{userId}/produceListings/{produceListingId}: Produce listings created by users.
 *
 * Key Security Decisions:
 * - User data is strictly private and accessible only to the authenticated user.
 * - Market price data is publicly readable but not writable by clients.
 * - List operations are generally restricted to the owner of the data, except for market prices.
 * - Data validation is minimal in this prototyping phase, focusing on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * - All user-owned documents contain the `userId` in their path, and this is enforced in the rules.
 *   This avoids costly `get()` calls to verify ownership.
 *
 * Structural Segregation:
 * - User-specific data is stored under the `/users/{userId}` path, ensuring clear ownership and
 *   preventing accidental mixing of public and private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile information only to the authenticated user.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user is the owner (userId matches request.auth.uid).
     * @allow (create) if the user is creating their own profile (userId matches request.auth.uid).
     * @deny (get, list, create, update, delete) if the user is not authenticated or not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to field data only to the owner of the field.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (get, list, create, update, delete) if the user is the owner (userId matches request.auth.uid).
     * @deny (get, list, create, update, delete) if the user is not authenticated or not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/fields/{fieldId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to expense data only to the owner of the expense.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (get, list, create, update, delete) if the user is the owner (userId matches request.auth.uid).
     * @deny (get, list, create, update, delete) if the user is not authenticated or not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to task data only to the owner of the task.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (get, list, create, update, delete) if the user is the owner (userId matches request.auth.uid).
     * @deny (get, list, create, update, delete) if the user is not authenticated or not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to growth data only to the owner of the growth data's field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (get, list, create, update, delete) if the user is the owner (userId matches request.auth.uid).
     * @deny (get, list, create, update, delete) if the user is not authenticated or not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to market price data. Write access is denied to clients.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) to all users.
     * @deny (create, update, delete) to all users.
     * @principle Allows public read access but restricts write access to prevent unauthorized modifications.
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to produce listings only to the owner of the listing.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (get, list, create, update, delete) if the user is the owner (userId matches request.auth.uid).
     * @deny (get, list, create, update, delete) if the user is not authenticated or not the owner.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}