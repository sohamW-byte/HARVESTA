/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private data, with public read access to market prices and feedback.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/fields/{fieldId}: Field data owned by the user.
 * - /users/{userId}/expenses/{expenseId}: Expense records owned by the user.
 * - /users/{userId}/tasks/{taskId}: Task data owned by the user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Growth data for a specific field, owned by the user.
 * - /marketPrices/{marketPriceId}: Market price data, publicly readable.
 * - /users/{userId}/produceListings/{produceListingId}: Produce listings created by the user.
 * - /feedbacks/{feedbackId}: User feedback submissions, publicly readable and writable by authenticated users.
 *
 * Key Security Decisions:
 * - User data is strictly owned by the user, enforced through path-based rules.
 * - Market prices are publicly readable, but write access is not defined (TODO: restrict to admin).
 * - Feedback is publicly readable and writable by authenticated users (no ownership enforced).
 * - No user listing is allowed to protect user privacy.
 * - Data consistency between paths and document fields is enforced on create and update.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by nesting data under /users/{userId}, avoiding the need for `get()` calls to check ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document based on the userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document based on the userId.
     * @details This function combines the ownership check with the existence check (`resource != null`) for `update` and `delete` operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that the userId in the request data matches the userId in the path.
     * @details This is used on `create` operations to ensure the correct ownership link is established.
     */
    function isUserIdInRequestDataValid(userId) {
      return request.resource.data.userId == userId;
    }

    /**
     * @description Enforces immutability for critical relational fields like userId.
     * @details This is used on `update` operations to prevent changes to the ownership link.  request.resource.data represents the merged state of the document after the update.
     */
    function isUserIdImmutable(userId) {
      return request.resource.data.userId == resource.data.userId;
    }

    /**
     * @description Defines the security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can access and modify their own profile.
     * @deny (create) - User attempts to create a profile with an ID that doesn't match their auth UID.
     * @deny (get, update, delete) - User attempts to access or modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Only allow a user to create their own profile.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Only allow a user to read, update, or delete their own profile.
      allow get, update, delete: if isExistingOwner(userId) && isUserIdImmutable(userId);

      // Do not allow listing all users.  This protects user privacy.
      allow list: if false;
    }

    /**
     * @description Defines the security rules for fields under a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) - Authenticated user can create a field under their profile.
     * @allow (get, update, delete) - Authenticated user can access and modify fields under their profile.
     * @deny (create) - User attempts to create a field with a userId that doesn't match the path.
     * @deny (get, update, delete) - User attempts to access or modify another user's fields.
     * @principle Enforces document ownership and relational integrity.
     */
    match /users/{userId}/fields/{fieldId} {
      allow create: if isSignedIn() && isOwner(userId) && isUserIdInRequestDataValid(userId);
      allow get, update, delete: if isExistingOwner(userId) && isUserIdImmutable(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Defines the security rules for expenses under a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - Authenticated user can create an expense under their profile.
     * @allow (get, update, delete) - Authenticated user can access and modify expenses under their profile.
     * @deny (create) - User attempts to create an expense with a userId that doesn't match the path.
     * @deny (get, update, delete) - User attempts to access or modify another user's expenses.
     * @principle Enforces document ownership and relational integrity.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow create: if isSignedIn() && isOwner(userId) && isUserIdInRequestDataValid(userId);
      allow get, update, delete: if isExistingOwner(userId) && isUserIdImmutable(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Defines the security rules for tasks under a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - Authenticated user can create a task under their profile.
     * @allow (get, update, delete) - Authenticated user can access and modify tasks under their profile.
     * @deny (create) - User attempts to create a task with a userId that doesn't match the path.
     * @deny (get, update, delete) - User attempts to access or modify another user's tasks.
     * @principle Enforces document ownership and relational integrity.
     */
    match /users/{userId}/tasks/{taskId} {
      allow create: if isSignedIn() && isOwner(userId) && isUserIdInRequestDataValid(userId);
      allow get, update, delete: if isExistingOwner(userId) && isUserIdImmutable(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Defines the security rules for growth data under a field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) - Authenticated user can create growth data under their field.
     * @allow (get, update, delete) - Authenticated user can access and modify growth data under their field.
     * @deny (create) - User attempts to create growth data with a userId that doesn't match the path.
     * @deny (get, update, delete) - User attempts to access or modify another user's growth data.
     * @principle Enforces document ownership and relational integrity through hierarchical paths.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, update, delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Defines the security rules for market prices.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) - All users can read market prices.
     * @deny (create, update, delete) - No user can create, update, or delete market prices.
     * @principle Public read access with restricted write access (TODO: implement admin-only writes).
     */
    match /marketPrices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check for write access
    }

    /**
     * @description Defines the security rules for produce listings.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) - Authenticated user can create a produce listing under their profile.
     * @allow (get, update, delete) - Authenticated user can access and modify produce listings under their profile.
     * @deny (create) - User attempts to create a produce listing with a userId that doesn't match the path.
     * @deny (get, update, delete) - User attempts to access or modify another user's produce listings.
     * @principle Enforces document ownership and relational integrity.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      allow create: if isSignedIn() && isOwner(userId) && isUserIdInRequestDataValid(userId);
      allow get, update, delete: if isExistingOwner(userId) && isUserIdImmutable(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Defines the security rules for feedback submissions.
     * @path /feedbacks/{feedbackId}
     * @allow (get, list) - All users can read feedback submissions.
     * @allow (create) - Authenticated users can submit feedback.
     * @deny (update, delete) - No user can update or delete feedback submissions.
     * @principle Public read and create access for authenticated users, with no update/delete allowed.
     */
    match /feedbacks/{feedbackId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}