/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private data,
 *              while allowing public read access to market prices and public write access to feedback submissions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 * - /users/{userId}/fields/{fieldId}: Stores field data, accessible only by the owning user.
 * - /users/{userId}/expenses/{expenseId}: Stores expense records, accessible only by the owning user.
 * - /users/{userId}/tasks/{taskId}: Stores tasks, accessible only by the owning user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Stores growth data, accessible only by the owning user.
 * - /marketPrices/{marketPriceId}: Stores market price data, publicly readable.
 * - /users/{userId}/produceListings/{produceListingId}: Stores produce listings, accessible only by the owning user.
 * - /feedbacks/{feedbackId}: Stores user feedback, publicly writable by authenticated users.
 *
 * Key Security Decisions:
 * - User data is strictly private and only accessible to the authenticated user.
 * - Market price data is publicly readable, but write access is not defined (TODO).
 * - Feedback submissions are publicly writable by authenticated users.
 * - Listing all documents in a user-owned subcollection is allowed for the owner.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by matching the `userId` path segment with the authenticated user's UID.
 *   This avoids the need for costly `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to field data associated with a user.
     * @path /users/{userId}/fields/{fieldId}
     */
    match /users/{userId}/fields/{fieldId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to expense records associated with a user.
     * @path /users/{userId}/expenses/{expenseId}
     */
    match /users/{userId}/expenses/{expenseId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks associated with a user.
     * @path /users/{userId}/tasks/{taskId}
     */
    match /users/{userId}/tasks/{taskId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to growth data associated with a field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to market price data.
     * @path /marketPrices/{marketPriceId}
     */
    match /marketPrices/{marketPriceId} {
        allow get: if true;
        allow list: if true;
        allow create: if false; // TODO: Add admin role validation.
        allow update: if false; // TODO: Add admin role validation.
        allow delete: if false; // TODO: Add admin role validation.
    }

    /**
     * @description Controls access to produce listings created by users.
     * @path /users/{userId}/produceListings/{produceListingId}
     */
    match /users/{userId}/produceListings/{produceListingId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user feedback submissions.
     * @path /feedbacks/{feedbackId}
     */
    match /feedbacks/{feedbackId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }
  }
}