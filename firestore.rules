/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to market price data and public write access to feedback submissions.
 *
 * Data Structure:
 * - User profiles and associated data (fields, expenses, tasks, produce listings, growth data) are nested under `/users/{userId}`.
 * - Market price data is stored in the top-level `/marketPrices/{marketPriceId}` collection and is publicly readable.
 * - Feedback submissions are stored in the top-level `/feedbacks/{feedbackId}` collection and can be created by any authenticated user.
 *
 * Key Security Decisions:
 * - User data is strictly segregated and only accessible to the owning user.
 * - Market price data is publicly accessible but only updatable by trusted sources (currently not enforced in this prototype).
 * - Feedback submissions can be created by any authenticated user, but listing/reading is not allowed for privacy.
 * - Data consistency between the path and the document's internal `userId` field is enforced on creation and updates to maintain ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     * @allow (get, list, update, delete) - Authenticated user can access/modify their own profile.
     * @deny (create) - Authenticated user tries to create a profile with a mismatched userId.
     * @deny (update, delete) - Authenticated user tries to modify someone else's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to field data associated with a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) - Authenticated user creates a field under their userId.
     * @allow (get, list, update, delete) - Authenticated user can access/modify their own fields.
     * @deny (create) - Authenticated user tries to create a field under someone else's userId.
     * @deny (update, delete) - Authenticated user tries to modify someone else's field.
     * @principle Enforces document ownership and validates the 'userId' field on create.
     */
    match /users/{userId}/fields/{fieldId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to expense records associated with a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - Authenticated user creates an expense record under their userId.
     * @allow (get, list, update, delete) - Authenticated user can access/modify their own expense records.
     * @deny (create) - Authenticated user tries to create an expense record under someone else's userId.
     * @deny (update, delete) - Authenticated user tries to modify someone else's expense records.
     * @principle Enforces document ownership and validates the 'userId' field on create.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to tasks associated with a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - Authenticated user creates a task under their userId.
     * @allow (get, list, update, delete) - Authenticated user can access/modify their own tasks.
     * @deny (create) - Authenticated user tries to create a task under someone else's userId.
     * @deny (update, delete) - Authenticated user tries to modify someone else's tasks.
     * @principle Enforces document ownership and validates the 'userId' field on create.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to growth data for a specific field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) - Authenticated user creates growth data under their field.
     * @allow (get, list, update, delete) - Authenticated user can access/modify their own growth data.
     * @deny (create) - Authenticated user tries to create growth data under someone else's field.
     * @deny (update, delete) - Authenticated user tries to modify someone else's growth data.
     * @principle Enforces document ownership and validates the 'fieldId' field on create.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.fieldId == fieldId;
      allow update: if isExistingOwner(userId) && request.resource.data.fieldId == resource.data.fieldId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Public read access to market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) - Anyone can read market price data.
     * @deny (create, update, delete) - Only trusted sources should be able to modify market price data (currently denied).
     * @principle Public read access with restricted write access.
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add validation for trusted source.
      allow update: if false; // TODO: Add validation for trusted source.
      allow delete: if false; // TODO: Add validation for trusted source.
    }

    /**
     * @description Secure access to produce listings created by users.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) - Authenticated user creates a produce listing under their userId.
     * @allow (get, list, update, delete) - Authenticated user can access/modify their own produce listings.
     * @deny (create) - Authenticated user tries to create a produce listing under someone else's userId.
     * @deny (update, delete) - Authenticated user tries to modify someone else's produce listings.
     * @principle Enforces document ownership and validates the 'userId' field on create.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Public write access to feedback submissions.
     * @path /feedbacks/{feedbackId}
     * @allow (create) - Any authenticated user can submit feedback.
     * @deny (get, list, update, delete) - Feedback submissions are not readable or modifiable after creation.
     * @principle Allows public feedback submissions with no read access.
     */
    match /feedbacks/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}