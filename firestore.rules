/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *              with public read access for market prices and authenticated-user write access for feedback.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the owning user.
 * - /users/{userId}/fields/{fieldId}: Field data, accessible only by the owning user.
 * - /users/{userId}/expenses/{expenseId}: Expense records, accessible only by the owning user.
 * - /users/{userId}/tasks/{taskId}: Task data, accessible only by the owning user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Growth data, accessible only by the owning user.
 * - /marketPrices/{marketPriceId}: Market price data, publicly readable.
 * - /users/{userId}/produceListings/{produceListingId}: Produce listings, accessible only by the owning user.
 * - /feedbacks/{feedbackId}: User feedback, writable by any authenticated user.
 *
 * Key Security Decisions:
 * - Strict user-ownership is enforced for all user-related data through path-based matching.
 * - Market prices are publicly readable to facilitate easy access to market information.
 * - Feedback submissions are allowed from any authenticated user.
 * - Listing of documents is restricted to the owning user for user-scoped subcollections.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by requiring the `userId` in the path to match the authenticated user's UID.
 *   This avoids the need for `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) auth != null && request.auth.uid == userId
     * @allow (create) auth != null && request.auth.uid == userId
     * @allow (list) false
     * @deny (get, update, delete) auth == null || request.auth.uid != userId
     * @deny (create) auth == null || request.auth.uid != userId
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure field data under a user profile. Only the owning user can manage their fields.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (get, list, create, update, delete) auth != null && request.auth.uid == userId
     * @deny (get, list, create, update, delete) auth == null || request.auth.uid != userId
     * @principle Enforces document ownership for writes and reads within a user's data tree.
     */
    match /users/{userId}/fields/{fieldId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Secure expense records under a user profile. Only the owning user can manage their expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (get, list, create, update, delete) auth != null && request.auth.uid == userId
     * @deny (get, list, create, update, delete) auth == null || request.auth.uid != userId
     * @principle Enforces document ownership for writes and reads within a user's data tree.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Secure task data under a user profile. Only the owning user can manage their tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (get, list, create, update, delete) auth != null && request.auth.uid == userId
     * @deny (get, list, create, update, delete) auth == null || request.auth.uid != userId
     * @principle Enforces document ownership for writes and reads within a user's data tree.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Secure growth data under a specific field. Only the owning user can manage the growth data.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (get, list, create, update, delete) auth != null && request.auth.uid == userId
     * @deny (get, list, create, update, delete) auth == null || request.auth.uid != userId
     * @principle Enforces document ownership for writes and reads within a user's data tree.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allow public read access to market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) true
     * @deny (create, update, delete) true
     * @principle Allows public read access while restricting writes.
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure produce listings under a user profile. Only the owning user can manage their produce listings.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (get, list, create, update, delete) auth != null && request.auth.uid == userId
     * @deny (get, list, create, update, delete) auth == null || request.auth.uid != userId
     * @principle Enforces document ownership for writes and reads within a user's data tree.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Allow any authenticated user to submit feedback.
     * @path /feedbacks/{feedbackId}
     * @allow (create) auth != null
     * @allow (get, list, update, delete) false
     * @principle Allows any authenticated user to write feedback, but restricts all other operations.
     */
    match /feedbacks/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}