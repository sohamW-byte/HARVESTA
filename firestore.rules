/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private data,
 *              while allowing public read access to certain collections like market prices and user feedback.
 *
 * Data Structure:
 * - All user-specific data (fields, expenses, tasks, produce listings, growth data) is nested under the
 *   /users/{userId} path to enforce ownership.
 * - Market price data and feedback are stored in top-level collections (/marketPrices, /feedbacks)
 *   and have different access control rules.
 *
 * Key Security Decisions:
 * - Strict user-ownership for all resources under /users/{userId}. Only the authenticated user
 *   matching the {userId} can read, create, update, or delete data in these subcollections.
 * - Market prices are publicly readable. Writes are not secured in this prototype.
 * - User feedback is publicly writeable by authenticated users.
 * - Listing of user documents is only allowed for the owner.
 *
 * Denormalization for Authorization:
 * - The rules rely on path-based ownership (data nested under /users/{userId}) and userId fields
 *   within documents to avoid `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' reads their profile.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates their profile.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' deletes their profile.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create profile for 'user123'.
     *       request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for field data under a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) User with ID 'user123' creates a field.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' reads a field.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates a field.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' deletes a field.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create a field for 'user123'.
     *       request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/fields/{fieldId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for expense records under a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with ID 'user123' creates an expense.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' reads an expense.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates an expense.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' deletes an expense.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create an expense for 'user123'.
     *       request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for tasks under a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID 'user123' creates a task.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' reads a task.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates a task.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' deletes a task.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create a task for 'user123'.
     *       request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for growth data under a field owned by a user.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) User with ID 'user123' creates growth data for their field.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' reads growth data for their field.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates growth data for their field.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' deletes growth data for their field.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create growth data for 'user123'.
     *       request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.fieldId == fieldId;
      allow update: if isExistingOwner(userId) && request.resource.data.fieldId == resource.data.fieldId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow (get) Any user can read market price data.
     * @allow (list) Any user can list market price data.
     * @deny (create) No one can create market price data without proper authorization. // TODO: Add role-based access control.
     * @deny (update) No one can update market price data without proper authorization. // TODO: Add role-based access control.
     * @deny (delete) No one can delete market price data without proper authorization. // TODO: Add role-based access control.
     * @principle Allows public read access to market price data.
     */
    match /marketPrices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based access control.
    }

    /**
     * @description Defines access rules for produce listings under a user.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) User with ID 'user123' creates a produce listing.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' reads a produce listing.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates a produce listing.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' deletes a produce listing.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create a produce listing for 'user123'.
     *       request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for user feedback submissions.
     * @path /feedbacks/{feedbackId}
     * @allow (create) Any authenticated user can submit feedback.
     * @allow (get) Any user can read feedback.
     * @allow (list) Any user can list feedback.
     * @deny (update) No one can update feedback without proper authorization. // TODO: Add role-based access control.
     * @deny (delete) No one can delete feedback without proper authorization. // TODO: Add role-based access control.
     * @principle Allows public writes and reads for feedback submissions by authenticated users.
     */
    match /feedbacks/{feedbackId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if false; // TODO: Add role-based access control.
    }
  }
}