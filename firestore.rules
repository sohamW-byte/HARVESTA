/**
 * @file Firebase Security Rules for Firestore.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for user profiles and associated data (fields, expenses, tasks, produce listings).
 *  Market prices and feedback are publicly accessible.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/fields/{fieldId}: Stores field data associated with a user.
 * - /users/{userId}/expenses/{expenseId}: Stores expense records associated with a user.
 * - /users/{userId}/tasks/{taskId}: Stores tasks associated with a user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Stores growth data for a specific field.
 * - /marketPrices/{marketPriceId}: Stores market price data for different crops (publicly accessible).
 * - /users/{userId}/produceListings/{produceListingId}: Stores produce listings created by users.
 * - /feedbacks/{feedbackId}: Stores user feedback submissions (publicly writable by authenticated users).
 *
 * Key Security Decisions:
 * - Strict user ownership: Users can only read and write their own profile data and associated subcollections.
 * - Market prices are publicly readable.
 * - Feedback can be submitted by any authenticated user.
 * - Listing of documents within a user's subcollections is allowed only by the owner.
 *
 * Denormalization for Authorization:
 * - User-owned data is nested under /users/{userId} to avoid `get()` calls for ownership checks.
 *
 * Structural Segregation:
 * - User profiles, fields, expenses, tasks, growth data, market prices, produce listings, and feedback are stored in separate collections for clear access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'fODDonvCCLTTHYMUcFm85cosieA3' can create their profile if request.auth.uid matches.
     * @allow (get, update, delete) User with ID 'fODDonvCCLTTHYMUcFm85cosieA3' can read, update, and delete their profile.
     * @deny (create) User with ID 'fODDonvCCLTTHYMUcFm85cosieA3' cannot create a profile if request.auth.uid does not match.
     * @deny (get, update, delete) User with ID 'differentUserId' cannot read, update, or delete user data for 'fODDonvCCLTTHYMUcFm85cosieA3'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users

      // Allow creating a user document if the authenticated user's ID matches the document ID.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;

      // check that the user updating their profile is the owner and that
      // the immutable email is not being changed.
      allow update: if isExistingOwner(userId) && (request.resource.data.id == resource.data.id) ;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their fields.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) User with ID 'fODDonvCCLTTHYMUcFm85cosieA3' can create a field if request.auth.uid matches the userId.
     * @allow (get, list, update, delete) User with ID 'fODDonvCCLTTHYMUcFm85cosieA3' can read, list, update, and delete their own fields.
     * @deny (create) User with ID 'differentUserId' cannot create a field for 'fODDonvCCLTTHYMUcFm85cosieA3'.
     * @deny (get, list, update, delete) User with ID 'differentUserId' cannot read, list, update, or delete fields for 'fODDonvCCLTTHYMUcFm85cosieA3'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/fields/{fieldId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with ID 'fODDonvCCLTTHYMUcFm85cosieA3' can create an expense if request.auth.uid matches the userId.
     * @allow (get, list, update, delete) User with ID 'fODDonvCCLTTHYMUcFm85cosieA3' can read, list, update, and delete their own expenses.
     * @deny (create) User with ID 'differentUserId' cannot create an expense for 'fODDonvCCLTTHYMUcFm85cosieA3'.
     * @deny (get, list, update, delete) User with ID 'differentUserId' cannot read, list, update, or delete expenses for 'fODDonvCCLTTHYMUcFm85cosieA3'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID 'fODDonvCCLTTHYMUcFm85cosieA3' can create a task if request.auth.uid matches the userId.
     * @allow (get, list, update, delete) User with ID 'fODDonvCCLTTHYMUcFm85cosieA3' can read, list, update, and delete their own tasks.
     * @deny (create) User with ID 'differentUserId' cannot create a task for 'fODDonvCCLTTHYMUcFm85cosieA3'.
     * @deny (get, list, update, delete) User with ID 'differentUserId' cannot read, list, update, or delete tasks for 'fODDonvCCLTTHYMUcFm85cosieA3'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage growth data for their fields.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) User with ID 'fODDonvCCLTTHYMUcFm85cosieA3' can create growth data if request.auth.uid matches the userId.
     * @allow (get, list, update, delete) User with ID 'fODDonvCCLTTHYMUcFm85cosieA3' can read, list, update, and delete their own growth data.
     * @deny (create) User with ID 'differentUserId' cannot create growth data for 'fODDonvCCLTTHYMUcFm85cosieA3'.
     * @deny (get, list, update, delete) User with ID 'differentUserId' cannot read, list, update, or delete growth data for 'fODDonvCCLTTHYMUcFm85cosieA3'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read market prices, but restricts writing.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) Any user can read market prices.
     * @deny (create, update, delete) No user can create, update, or delete market prices without specific role authorization (TODO).
     * @principle Public read access with restricted writes.
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;  // TODO: Add role-based authorization for creating market prices.
      allow update: if false; // TODO: Add role-based authorization for updating market prices.
      allow delete: if false; // TODO: Add role-based authorization for deleting market prices.
    }

    /**
     * @description Allows users to manage their produce listings.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) User with ID 'fODDonvCCLTTHYMUcFm85cosieA3' can create a produce listing if request.auth.uid matches the userId.
     * @allow (get, list, update, delete) User with ID 'fODDonvCCLTTHYMUcFm85cosieA3' can read, list, update, and delete their own produce listings.
     * @deny (create) User with ID 'differentUserId' cannot create a produce listing for 'fODDonvCCLTTHYMUcFm85cosieA3'.
     * @deny (get, list, update, delete) User with ID 'differentUserId' cannot read, list, update, or delete produce listings for 'fODDonvCCLTTHYMUcFm85cosieA3'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to submit feedback.
     * @path /feedbacks/{feedbackId}
     * @allow (create) Any authenticated user can create a feedback document.
     * @allow (get, list) Any user can read the feedback.
     * @deny (update, delete) No user can update or delete feedback.
     * @principle Public write access for authenticated users, restricted updates and deletes.
     */
    match /feedbacks/{feedbackId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}