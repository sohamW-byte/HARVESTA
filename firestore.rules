/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * while allowing public read access to market price data and public write access to feedback data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - User-owned data (fields, expenses, tasks, produce listings) is nested under the corresponding `/users/{userId}` path.
 * - Growth data is nested under `/users/{userId}/fields/{fieldId}`.
 * - Market price data is stored in a global `/marketPrices/{marketPriceId}` collection.
 * - User feedback is stored in a global `/feedbacks/{feedbackId}` collection.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user documents and associated data.
 * - Listing of user documents is disallowed as a general security practice.
 * - Market price data is publicly readable.
 * - Any authenticated user can submit feedback.
 * - Structural segregation is used to clearly define private vs. public data access patterns.
 *
 * Denormalization for Authorization:
 * - Ownership is enforced by matching the `userId` in the path to the authenticated user's UID (`request.auth.uid`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for the /users/{userId} document.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2.
     * @deny (create) - User with UID 'otherUserId' cannot create document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2.
     * @allow (get) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can get their own user document.
     * @deny (get) - User with UID 'otherUserId' cannot get document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2.
     * @allow (update) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can update their own user document.
     * @deny (update) - User with UID 'otherUserId' cannot update document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2.
     * @allow (delete) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can delete their own user document.
     * @deny (delete) - User with UID 'otherUserId' cannot delete document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for the /users/{userId}/fields/{fieldId} document.
     * @path /databases/{database}/documents/users/{userId}/fields/{fieldId}
     * @allow (create) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/someFieldId.
     * @deny (create) - User with UID 'otherUserId' cannot create document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/someFieldId.
     * @allow (get) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can get their own field document.
     * @deny (get) - User with UID 'otherUserId' cannot get document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/someFieldId.
     * @allow (update) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can update their own field document.
     * @deny (update) - User with UID 'otherUserId' cannot update document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/someFieldId.
     * @allow (delete) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can delete their own field document.
     * @deny (delete) - User with UID 'otherUserId' cannot delete document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/someFieldId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/fields/{fieldId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for the /users/{userId}/expenses/{expenseId} document.
     * @path /databases/{database}/documents/users/{userId}/expenses/{expenseId}
     * @allow (create) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/expenses/someExpenseId.
     * @deny (create) - User with UID 'otherUserId' cannot create document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/expenses/someExpenseId.
     * @allow (get) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can get their own expense document.
     * @deny (get) - User with UID 'otherUserId' cannot get document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/expenses/someExpenseId.
     * @allow (update) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can update their own expense document.
     * @deny (update) - User with UID 'otherUserId' cannot update document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/expenses/someExpenseId.
     * @allow (delete) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can delete their own expense document.
     * @deny (delete) - User with UID 'otherUserId' cannot delete document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/expenses/someExpenseId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for the /users/{userId}/tasks/{taskId} document.
     * @path /databases/{database}/documents/users/{userId}/tasks/{taskId}
     * @allow (create) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/tasks/someTaskId.
     * @deny (create) - User with UID 'otherUserId' cannot create document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/tasks/someTaskId.
     * @allow (get) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can get their own task document.
     * @deny (get) - User with UID 'otherUserId' cannot get document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/tasks/someTaskId.
     * @allow (update) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can update their own task document.
     * @deny (update) - User with UID 'otherUserId' cannot update document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/tasks/someTaskId.
     * @allow (delete) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can delete their own task document.
     * @deny (delete) - User with UID 'otherUserId' cannot delete document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/tasks/someTaskId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for the /users/{userId}/fields/{fieldId}/growthData/{growthDataId} document.
     * @path /databases/{database}/documents/users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/someFieldId/growthData/someGrowthDataId.
     * @deny (create) - User with UID 'otherUserId' cannot create document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/someFieldId/growthData/someGrowthDataId.
     * @allow (get) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can get their own growth data document.
     * @deny (get) - User with UID 'otherUserId' cannot get document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/someFieldId/growthData/someGrowthDataId.
     * @allow (update) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can update their own growth data document.
     * @deny (update) - User with UID 'otherUserId' cannot update document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/someFieldId/growthData/someGrowthDataId.
     * @allow (delete) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can delete their own growth data document.
     * @deny (delete) - User with UID 'otherUserId' cannot delete document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/someFieldId/growthData/someGrowthDataId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to market price data.
     * @path /databases/{database}/documents/marketPrices/{marketPriceId}
     * @allow (get) - Any user can get a market price document.
     * @allow (list) - Any user can list market price documents.
     * @deny (create) - No user can create a market price document through client side.
     * @deny (update) - No user can update a market price document through client side.
     * @deny (delete) - No user can delete a market price document through client side.
     * @principle Public read access.
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for the /users/{userId}/produceListings/{produceListingId} document.
     * @path /databases/{database}/documents/users/{userId}/produceListings/{produceListingId}
     * @allow (create) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/produceListings/someProduceListingId.
     * @deny (create) - User with UID 'otherUserId' cannot create document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/produceListings/someProduceListingId.
     * @allow (get) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can get their own produce listing document.
     * @deny (get) - User with UID 'otherUserId' cannot get document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/produceListings/someProduceListingId.
     * @allow (update) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can update their own produce listing document.
     * @deny (update) - User with UID 'otherUserId' cannot update document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/produceListings/someProduceListingId.
     * @allow (delete) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can delete their own produce listing document.
     * @deny (delete) - User with UID 'otherUserId' cannot delete document /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/produceListings/someProduceListingId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to submit feedback.
     * @path /databases/{database}/documents/feedbacks/{feedbackId}
     * @allow (create) - Any authenticated user can create a feedback document.
     * @deny (get) - Getting individual feedback document not allowed from client side.
     * @deny (list) - Listing feedback documents not allowed from client side.
     * @deny (update) - No user can update a feedback document through client side.
     * @deny (delete) - No user can delete a feedback document through client side.
     * @principle Public write access.
     */
    match /feedbacks/{feedbackId} {
      allow create: if isSignedIn();
      allow get: if false;
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the requesting user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the requesting user is the owner of the document and the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}