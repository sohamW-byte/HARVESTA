/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data, combined with public read access for certain global collections.
 * Data is segregated into collections based on entity type and access requirements.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user profile information. Access is restricted to the user themselves.
 * - /users/{userId}/fields/{fieldId}: Stores field data. Access is restricted to the owning user.
 * - /users/{userId}/expenses/{expenseId}: Stores expense data. Access is restricted to the owning user.
 * - /users/{userId}/tasks/{taskId}: Stores task data. Access is restricted to the owning user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Stores growth data for fields. Access is restricted to the owning user.
 * - /marketPrices/{marketPriceId}: Stores global market price data. Public read access is allowed.
 * - /users/{userId}/produceListings/{produceListingId}: Stores produce listings. Access is restricted to the owning user.
 * - /feedbacks/{feedbackId}: Stores user feedback. Public read and authenticated write access is allowed.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All user-owned data is nested under /users/{userId} to simplify ownership checks.
 * - Public read access is granted to the /marketPrices collection.
 * - Authenticated users can create feedback entries.
 *
 * Denormalization for Authorization:
 * - All user-owned documents contain a `userId` field that must match the userId in the path. This prevents unauthorized data manipulation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Defines the security rules for the /users/{userId} collection.
     * @path: /users/{userId}
     * @allow: User with UID 'kmJp728pbjSLNeLYzZcKvUl2uJB3' can create their own profile (create).
     * @deny: User with UID 'otherUserId' cannot create a profile with ID 'kmJp728pbjSLNeLYzZcKvUl2uJB3' (create).
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Only signed-in users can attempt any operations
      allow get: if false; // No one can get the document directly.
      allow list: if false; // No one can list all users.

      // Allow the user to create their own document, enforcing that the userId in the path
      // matches their authentication UID and that the 'id' field in the document also matches.
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;

      // Allow updates and deletes only if the user is signed in and owns the document.
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description: Defines the security rules for the /users/{userId}/fields/{fieldId} collection.
     * @path: /users/{userId}/fields/{fieldId}
     * @allow: User with UID 'kmJp728pbjSLNeLYzZcKvUl2uJB3' can create a field under their user ID (create).
     * @deny: User with UID 'otherUserId' cannot create a field under user ID 'kmJp728pbjSLNeLYzZcKvUl2uJB3' (create).
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId}/fields/{fieldId} {
      // Only signed-in users can attempt any operations
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update, delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description: Defines the security rules for the /users/{userId}/expenses/{expenseId} collection.
     * @path: /users/{userId}/expenses/{expenseId}
     * @allow: User with UID 'kmJp728pbjSLNeLYzZcKvUl2uJB3' can create an expense under their user ID (create).
     * @deny: User with UID 'otherUserId' cannot create an expense under user ID 'kmJp728pbjSLNeLYzZcKvUl2uJB3' (create).
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      // Only signed-in users can attempt any operations
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update, delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description: Defines the security rules for the /users/{userId}/tasks/{taskId} collection.
     * @path: /users/{userId}/tasks/{taskId}
     * @allow: User with UID 'kmJp728pbjSLNeLYzZcKvUl2uJB3' can create a task under their user ID (create).
     * @deny: User with UID 'otherUserId' cannot create a task under user ID 'kmJp728pbjSLNeLYzZcKvUl2uJB3' (create).
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      // Only signed-in users can attempt any operations
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update, delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description: Defines the security rules for the /users/{userId}/fields/{fieldId}/growthData/{growthDataId} collection.
     * @path: /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow: User with UID 'kmJp728pbjSLNeLYzZcKvUl2uJB3' can create growth data under their user ID and field ID (create).
     * @deny: User with UID 'otherUserId' cannot create growth data under user ID 'kmJp728pbjSLNeLYzZcKvUl2uJB3' (create).
     * @principle: Enforces document ownership for all operations via a hierarchical path.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      // Only signed-in users can attempt any operations
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description: Defines the security rules for the /marketPrices/{marketPriceId} collection.
     * @path: /marketPrices/{marketPriceId}
     * @allow: Any user can read market price data (get, list).
     * @deny: No one can create, update, or delete market price data without authentication (create, update, delete).
     * @principle: Allows public read access with restricted write access.
     */
    match /marketPrices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // No one can create/update/delete market prices. Implement admin role if needed.
    }

    /**
     * @description: Defines the security rules for the /users/{userId}/produceListings/{produceListingId} collection.
     * @path: /users/{userId}/produceListings/{produceListingId}
     * @allow: User with UID 'kmJp728pbjSLNeLYzZcKvUl2uJB3' can create a produce listing under their user ID (create).
     * @deny: User with UID 'otherUserId' cannot create a produce listing under user ID 'kmJp728pbjSLNeLYzZcKvUl2uJB3' (create).
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      // Only signed-in users can attempt any operations
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update, delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description: Defines the security rules for the /feedbacks/{feedbackId} collection.
     * @path: /feedbacks/{feedbackId}
     * @allow: Any signed-in user can create feedback (create). Any user can read feedback (get, list).
     * @deny: No one can update or delete feedback (update, delete).
     * @principle: Allows public read and authenticated write access for feedback submissions.
     */
    match /feedbacks/{feedbackId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description: Checks if the user is signed in.
     * @returns: True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description: Checks if the user ID matches the authenticated user's UID.
     * @param {string} userId - The user ID to check.
     * @returns: True if the user ID matches the authenticated user's UID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description: Checks if the user is the existing owner of the document.
     * @param {string} userId - The user ID to check against.
     * @returns: True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}