/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data, with a public read for market prices.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - User-owned data (fields, expenses, tasks, produce listings) are stored under their respective `/users/{userId}/...` subcollections.
 * - Growth data is nested under `/users/{userId}/fields/{fieldId}/growthData/{growthDataId}`.
 * - Market prices are stored in the top-level `/marketPrices/{marketPriceId}` collection.
 *
 * Key Security Decisions:
 * - User data is private and only accessible to the owning user.
 * - Market price data is publicly readable.
 * - Listing of user documents in subcollections is allowed for the owner.
 * - All write operations (create, update, delete) require authentication and proper authorization.
 *
 * Denormalization for Authorization:
 * - User-owned documents include a `userId` field that must match the path's `userId` parameter. This avoids costly `get()` calls for ownership checks.
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`, while public market price data is stored in the top-level `/marketPrices` collection. This allows for clear and efficient access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, list, update, delete) - Authenticated user can access their own profile if the userId matches their auth UID.
     * @deny (create) - Unauthenticated user cannot create a profile.
     * @deny (update, delete) - User cannot modify another user's profile.
     * @principle Enforces document ownership and requires a verified identity.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to field documents under a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own fields if the userId matches their auth UID.
     * @deny (create, update, delete) - User cannot manage another user's fields.
     * @principle Enforces document ownership and requires a verified identity.
     */
    match /users/{userId}/fields/{fieldId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to expense documents under a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own expenses if the userId matches their auth UID.
     * @deny (create, update, delete) - User cannot manage another user's expenses.
     * @principle Enforces document ownership and requires a verified identity.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to task documents under a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own tasks if the userId matches their auth UID.
     * @deny (create, update, delete) - User cannot manage another user's tasks.
     * @principle Enforces document ownership and requires a verified identity.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to growth data documents under a field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage growth data for their fields if the userId matches their auth UID.
     * @deny (create, update, delete) - User cannot manage growth data for another user's fields.
     * @principle Enforces document ownership and requires a verified identity.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isFieldOwner(userId, fieldId) {
            return get(/databases/$(database)/documents/users/$(userId)/fields/$(fieldId)).data.userId == userId;
        }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId) && isFieldOwner(userId, fieldId);
      allow list: if isOwner(userId) && isFieldOwner(userId, fieldId);
      allow create: if isSignedIn() && isOwner(userId) && isFieldOwner(userId, fieldId) && request.resource.data.fieldId == fieldId;
      allow update: if isExistingOwner(userId) && isFieldOwner(userId, fieldId) && request.resource.data.fieldId == fieldId;
      allow delete: if isExistingOwner(userId) && isFieldOwner(userId, fieldId);
    }

    /**
     * @description Controls access to market price documents.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) - Public read access to market prices.
     * @deny (create, update, delete) - Only authenticated users can manage market prices.
     * // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access.
     */
    match /marketPrices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to produce listing documents under a user.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own produce listings if the userId matches their auth UID.
     * @deny (create, update, delete) - User cannot manage another user's produce listings.
     * @principle Enforces document ownership and requires a verified identity.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}