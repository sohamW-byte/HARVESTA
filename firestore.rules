/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for most data, ensuring that users can only access their own resources.
 * It uses path-based authorization, leveraging the Firestore document structure to determine access rights.  All writes are protected by authorization checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/fields/{fieldId}: Stores field data associated with a user.
 * - /users/{userId}/expenses/{expenseId}: Stores expense records associated with a user.
 * - /users/{userId}/tasks/{taskId}: Stores tasks associated with a user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Stores growth data for a specific field.
 * - /marketPrices/{marketPriceId}: Stores market price data for different crops (publicly readable).
 * - /users/{userId}/produceListings/{produceListingId}: Stores produce listings created by users.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Market price data is publicly readable.
 * - All other data is strictly user-owned and only accessible by the corresponding user.
 * - Data validation is limited to ownership fields to enable rapid prototyping and iteration.
 *
 * Denormalization for Authorization:
 * - User-owned data is nested under /users/{userId} to avoid get() calls for ownership checks.
 *
 * Structural Segregation:
 * - Different data types (user profiles, fields, expenses, tasks, etc.) are stored in separate collections to simplify security rules and improve performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes and restricts access to a user's own data tree.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { id: 'user123', name: 'John Doe', email: 'john@example.com' }
     * @allow (update) User with ID 'user123' updates their profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { id: 'user123', name: 'Jane Doe' }
     * @deny (create) User with ID 'user123' attempts to create profile for 'user456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { id: 'user456', name: 'John Doe' }
     * @deny (update) User with ID 'user123' attempts to update profile for 'user456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { id: 'user456', name: 'Jane Doe' }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for writes and restricts access to a user's own data tree.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) User with ID 'user123' creates a field.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', name: 'My Field' }
     * @allow (update) User with ID 'user123' updates their field.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', name: 'New Field Name' }
     * @deny (create) User with ID 'user123' attempts to create field for 'user456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user456', name: 'My Field' }
     * @deny (update) User with ID 'user123' attempts to update field for 'user456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user456', name: 'New Field Name' }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/fields/{fieldId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for writes and restricts access to a user's own data tree.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with ID 'user123' creates an expense.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', amount: 50.00, type: 'Fertilizer' }
     * @allow (update) User with ID 'user123' updates their expense.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', amount: 75.00 }
     * @deny (create) User with ID 'user123' attempts to create expense for 'user456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user456', amount: 50.00, type: 'Fertilizer' }
     * @deny (update) User with ID 'user123' attempts to update expense for 'user456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user456', amount: 75.00 }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for writes and restricts access to a user's own data tree.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID 'user123' creates a task.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', title: 'Buy Fertilizer', status: 'To Do' }
     * @allow (update) User with ID 'user123' updates their task.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', status: 'In Progress' }
     * @deny (create) User with ID 'user123' attempts to create task for 'user456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user456', title: 'Buy Fertilizer', status: 'To Do' }
     * @deny (update) User with ID 'user123' attempts to update task for 'user456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user456', status: 'In Progress' }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for writes and restricts access to a user's own data tree.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) User with ID 'user123' creates growth data for their field.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { fieldId: 'field123', date: '2024-01-01', height: 10 }
     * @allow (update) User with ID 'user123' updates growth data for their field.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { fieldId: 'field123', height: 12 }
     * @deny (create) User with ID 'user123' attempts to create growth data for 'field456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { fieldId: 'field456', date: '2024-01-01', height: 10 }
     * @deny (update) User with ID 'user123' attempts to update growth data for 'field456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { fieldId: 'field456', height: 12 }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/fields/$(fieldId)).data.userId == userId && request.resource.data.fieldId == fieldId;
      allow update: if isExistingOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/fields/$(fieldId)).data.userId == userId && request.resource.data.fieldId == fieldId;
      allow delete: if isExistingOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/fields/$(fieldId)).data.userId == userId;
    }

    /**
     * @description Allows public read access to market price data. Owner-only writes are not yet implemented because the schema lacks an ownership field.
     * @path /marketPrices/{marketPriceId}
     * @allow (get) Any user can read market price data.
     * @allow (list) Any user can list market price data.
     * @deny (create) No writes currently allowed due to missing author/owner field in schema.
     * @principle Allows public read access.
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces document ownership for writes and restricts access to a user's own data tree.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) User with ID 'user123' creates a produce listing.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', cropName: 'Tomatoes', quantity: 100 }
     * @allow (update) User with ID 'user123' updates their produce listing.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', price: 2.50 }
     * @deny (create) User with ID 'user123' attempts to create produce listing for 'user456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user456', cropName: 'Tomatoes', quantity: 100 }
     * @deny (update) User with ID 'user123' attempts to update produce listing for 'user456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user456', price: 2.50 }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}