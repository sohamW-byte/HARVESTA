/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *              with public read access for market prices and authenticated-user write access for feedback.
 *
 * Data Structure:
 * - All data related to a specific user (fields, expenses, tasks, produce listings, growth data)
 *   is nested under `/users/{userId}`.
 * - Market prices are stored in the top-level `/marketPrices/{marketPriceId}` collection and are publicly readable.
 * - User feedback is stored in the top-level `/feedbacks/{feedbackId}` collection and can be written by any authenticated user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data.
 * - Market prices are publicly readable but not writable via the client.
 * - User listing is disallowed.
 *
 * Denormalization for Authorization:
 * - The `userId` is included in the document and enforced to match the path for data integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create their own document with matching ID.
     * @allow (get, update, delete) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can access their own document.
     * @deny (create) - User with UID 'attackerUID' cannot create a document with userId 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2'.
     * @deny (get, update, delete) - User with UID 'attackerUID' cannot access user 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects field data associated with a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create, get, update, delete, list) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can manage their own fields.
     * @deny (create, get, update, delete, list) - User with UID 'attackerUID' cannot access fields of user 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2'.
     * @principle Restricts access to a user's own data tree and enforces path-based ownership.
     */
    match /users/{userId}/fields/{fieldId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects expense records associated with a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create, get, update, delete, list) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can manage their own expenses.
     * @deny (create, get, update, delete, list) - User with UID 'attackerUID' cannot access expenses of user 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2'.
     * @principle Restricts access to a user's own data tree and enforces path-based ownership.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects tasks associated with a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create, get, update, delete, list) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can manage their own tasks.
     * @deny (create, get, update, delete, list) - User with UID 'attackerUID' cannot access tasks of user 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2'.
     * @principle Restricts access to a user's own data tree and enforces path-based ownership.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects growth data for a specific field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create, get, update, delete, list) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can manage growth data for their fields.
     * @deny (create, get, update, delete, list) - User with UID 'attackerUID' cannot access growth data of user 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2'.
     * @principle Restricts access to a user's own data tree and enforces hierarchical path-based ownership.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Provides public read access to market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) - Any user can read market prices.
     * @deny (create, update, delete) - No user can create, update or delete market prices through client side.
     * @principle Allows public read access while restricting write access.
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects produce listings created by users.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create, get, update, delete, list) - User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can manage their own produce listings.
     * @deny (create, get, update, delete, list) - User with UID 'attackerUID' cannot access produce listings of user 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2'.
     * @principle Restricts access to a user's own data tree and enforces path-based ownership.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to submit feedback.
     * @path /feedbacks/{feedbackId}
     * @allow (create) - Any authenticated user can submit feedback.
     * @allow (get, list, update, delete) - No user can get, list, update, or delete feedback via client side.
     * @principle Allows open writes for authenticated users.
     */
    match /feedbacks/{feedbackId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the document and it exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}