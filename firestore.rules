/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, ensuring that only the authenticated user can create, read, update, or delete their own data. Public read access is granted to the market prices collection, as this data is intended to be globally available.
 *
 * Data Structure:
 * - User profiles and associated data (fields, expenses, tasks, produce listings, and growth data) are nested under `/users/{userId}`. This hierarchical structure simplifies access control based on user identity.
 * - Market prices are stored in a top-level `/marketPrices` collection, which is publicly readable.
 *
 * Key Security Decisions:
 * - User data is strictly private and only accessible to the owning user.
 * - Listing all users is disallowed.
 * - Market price data is publicly readable but write access is not granted.
 *
 * Denormalization for Authorization:
 * To ensure Authorization Independence, data required for authorization decisions is denormalized. Specifically:
 * - User-owned documents at paths such as `/users/{userId}/fields/{fieldId}` MUST contain a `userId` field that matches the `{userId}` path segment. This ensures that the document is owned by the user specified in the path. This is validated on create and enforced as immutable on update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is the owner of the document.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the authenticated user is the existing owner of the document.
    function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId && resource != null;
    }

    /**
     * @description Grants access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the profile of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow the user to create their own document, but enforce that the userId matches the authenticated user's ID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // On update, the user must be the owner, and the userId field must not be changed.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to field documents within a user's profile.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) User with ID 'user123' can create a field under their profile.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete fields under their profile.
     * @deny (create) User with ID 'user456' cannot create a field under the profile of user 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete fields under the profile of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/fields/{fieldId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to expense documents within a user's profile.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with ID 'user123' can create an expense under their profile.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete expenses under their profile.
     * @deny (create) User with ID 'user456' cannot create an expense under the profile of user 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete expenses under the profile of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to task documents within a user's profile.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID 'user123' can create a task under their profile.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete tasks under their profile.
     * @deny (create) User with ID 'user456' cannot create a task under the profile of user 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete tasks under the profile of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to growth data documents within a user's field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) User with ID 'user123' can create growth data under their field.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete growth data under their field.
     * @deny (create) User with ID 'user456' cannot create growth data under the field of user 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete growth data under the field of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && true; // No relational integrity field
      allow update: if isExistingOwner(userId) && true; // No relational integrity field
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants read access to market price documents.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) Any user can read market prices.
     * @deny (create, update, delete) No user can create, update, or delete market prices.
     * @principle Allows public read access for market prices.
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to produce listing documents within a user's profile.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) User with ID 'user123' can create a produce listing under their profile.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete produce listings under their profile.
     * @deny (create) User with ID 'user456' cannot create a produce listing under the profile of user 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete produce listings under the profile of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}