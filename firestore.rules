/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data, while allowing public read access to market data and public write access for feedback.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/fields/{fieldId}: Field data, owned by the user.
 * - /users/{userId}/expenses/{expenseId}: Expense records, owned by the user.
 * - /users/{userId}/tasks/{taskId}: Tasks, owned by the user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Growth data, owned by the user and field.
 * - /marketPrices/{marketPriceId}: Market price data, publicly readable.
 * - /users/{userId}/produceListings/{produceListingId}: Produce listings, owned by the user.
 * - /feedbacks/{feedbackId}: User feedback, publicly writable by authenticated users.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's ID in the path.
 * - Market prices are publicly readable.
 * - Feedback can be created by any authenticated user.
 * - Listing of documents is allowed for user-owned subcollections.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by matching the {userId} path segment to the userId field within the documents.
 *   This avoids the need for costly `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile at /users/user123 with matching id field.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/write their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure field data for a user. Only the user can read/write their own field data.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) - User with UID 'user123' can create a field at /users/user123/fields/field123.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/write their field at /users/user123/fields/field123.
     * @deny (create) - User with UID 'user456' cannot create a field at /users/user123/fields/field123.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete the field at /users/user123/fields/field123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/fields/{fieldId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure expense records for a user. Only the user can read/write their own expense records.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User with UID 'user123' can create an expense at /users/user123/expenses/expense123.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/write their expense at /users/user123/expenses/expense123.
     * @deny (create) - User with UID 'user456' cannot create an expense at /users/user123/expenses/expense123.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete the expense at /users/user123/expenses/expense123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure tasks for a user. Only the user can read/write their own tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User with UID 'user123' can create a task at /users/user123/tasks/task123.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/write their task at /users/user123/tasks/task123.
     * @deny (create) - User with UID 'user456' cannot create a task at /users/user123/tasks/task123.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete the task at /users/user123/tasks/task123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure growth data for a field. Only the owner of the field can read/write growth data.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) - User with UID 'user123' can create growth data at /users/user123/fields/field123/growthData/growthData123.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/write their growth data at /users/user123/fields/field123/growthData/growthData123.
     * @deny (create) - User with UID 'user456' cannot create growth data at /users/user123/fields/field123/growthData/growthData123.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete the growth data at /users/user123/fields/field123/growthData/growthData123.
     * @principle Enforces document ownership for all operations via hierarchical path.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.fieldId == fieldId;
      allow update: if isExistingOwner(userId) && request.resource.data.fieldId == resource.data.fieldId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Market prices are publicly readable, but writes are not allowed in this prototype.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) - Any user can read market price data.
     * @deny (create, update, delete) - No one can create, update, or delete market price data.
     * @principle Public read access with restricted writes for future admin use.
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure produce listings for a user. Only the user can read/write their own listings.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) - User with UID 'user123' can create a produce listing at /users/user123/produceListings/listing123.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/write their listing at /users/user123/produceListings/listing123.
     * @deny (create) - User with UID 'user456' cannot create a listing at /users/user123/produceListings/listing123.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete the listing at /users/user123/produceListings/listing123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to submit feedback.
     * @path /feedbacks/{feedbackId}
     * @allow (create) - Any signed-in user can create feedback.
     * @deny (get, list, update, delete) - No get, list, update, or delete operations allowed.
     * @principle Allows public feedback submission from authenticated users.
     */
    match /feedbacks/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}