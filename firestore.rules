/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data
 * and allows public read access to market prices and feedback submissions.
 *
 * Data Structure:
 * - User profiles and associated data (fields, expenses, tasks, produce listings)
 *   are nested under `/users/{userId}`.
 * - Market prices are stored in the top-level `/marketPrices/{marketPriceId}` collection.
 * - Feedback submissions are stored in the top-level `/feedbacks/{feedbackId}` collection.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Market prices are publicly readable.
 * - Feedback submissions can be created by any authenticated user.
 * - Listing of documents is only permitted for user-owned subcollections.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by matching the `userId` in the path with `request.auth.uid`.
 *   This avoids the need for `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, list, update, delete) User with matching ID can access and manage their profile.
     * @deny (create, get, list, update, delete) User without matching ID cannot access or manage this profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId; //Enforce immutability of id
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to field data associated with a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) User with matching ID can create field data.
     * @allow (get, list, update, delete) User with matching ID can access and manage their field data.
     * @deny (create, get, list, update, delete) User without matching ID cannot access or manage this field data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/fields/{fieldId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && resource.data.userId == userId; //Enforce immutability of userId
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to expense records associated with a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with matching ID can create expense records.
     * @allow (get, list, update, delete) User with matching ID can access and manage their expense records.
     * @deny (create, get, list, update, delete) User without matching ID cannot access or manage this expense records.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && resource.data.userId == userId; //Enforce immutability of userId
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to tasks associated with a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with matching ID can create tasks.
     * @allow (get, list, update, delete) User with matching ID can access and manage their tasks.
     * @deny (create, get, list, update, delete) User without matching ID cannot access or manage these tasks.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && resource.data.userId == userId; //Enforce immutability of userId
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to growth data for a specific field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) User with matching ID can create growth data.
     * @allow (get, list, update, delete) User with matching ID can access and manage their growth data.
     * @deny (create, get, list, update, delete) User without matching ID cannot access or manage this growth data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId); // No userId to validate in request data. Assuming it's implicit in the path.
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Grants public read access to market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) Any user can read market prices.
     * @deny (create, update, delete) Only admin users can create, update, or delete market prices.
     * @principle Allows public read access while restricting write access.
     */
    match /marketPrices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Grants access to produce listings created by users.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) User with matching ID can create produce listings.
     * @allow (get, list, update, delete) User with matching ID can access and manage their produce listings.
     * @deny (create, get, list, update, delete) User without matching ID cannot access or manage these produce listings.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && resource.data.userId == userId; //Enforce immutability of userId
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to feedback submissions.
     * @path /feedbacks/{feedbackId}
     * @allow (create) Any authenticated user can submit feedback.
     * @deny (get, list, update, delete) Feedback can only be created, not read, updated, or deleted via client.
     * @principle Allows public write access for feedback submissions, restricts all other access.
     */
    match /feedbacks/{feedbackId} {
      function isSignedIn() {
          return request.auth != null;
      }

      allow get, list, update, delete: if false;
      allow create: if isSignedIn();
    }
  }
}