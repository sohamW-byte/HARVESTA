/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data, with some exceptions for public data.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/fields/{fieldId}: Field data, owned by the user.
 * - /users/{userId}/expenses/{expenseId}: Expense data, owned by the user.
 * - /users/{userId}/tasks/{taskId}: Task data, owned by the user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Growth data, owned by the user and field.
 * - /marketPrices/{marketPriceId}: Market price data, publicly readable.
 * - /users/{userId}/produceListings/{produceListingId}: Produce listings, owned by the user.
 * - /feedbacks/{feedbackId}: User feedback, writable by any authenticated user.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Listing of all users is disallowed.
 * - Market price data is publicly readable.
 * - User feedback can be created by any authenticated user.
 * - Data validation is limited to ownership checks and relational integrity for prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { id: 'user123', ... }
     * @deny (create) User with ID 'user123' cannot create a profile with a mismatched ID.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { id: 'user456', ... }
     * @allow (get) User with ID 'user123' can read their own profile.
     *   - auth: { uid: 'user123' }
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     *   - auth: { uid: 'user456' }
     * @principle Enforces document ownership for writes and reads, ensuring users can only access their own data.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create their own profile, enforcing that the user ID in the path matches the authenticated user's ID
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow a user to get their own profile
      allow get: if isSignedIn() && isOwner(userId);

      // Allow a user to update their own profile, ensuring the user ID in the path matches the authenticated user's ID and the ID field is immutable
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id;

      // Allow a user to delete their own profile
      allow delete: if isExistingOwner(userId);

      // Do not allow listing of all users
      allow list: if false;
    }

    /**
     * @description Enforces access control for field data associated with a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) User with ID 'user123' can create a field under their profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', ... }
     * @deny (create) User with ID 'user123' cannot create a field under another user's profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user456', ... }
     * @allow (get) User with ID 'user123' can read a field under their profile.
     *   - auth: { uid: 'user123' }
     * @deny (get) User with ID 'user456' cannot read a field under the profile of user 'user123'.
     *   - auth: { uid: 'user456' }
     * @principle Enforces document ownership for writes and reads, ensuring users can only access their own data.
     */
    match /users/{userId}/fields/{fieldId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create a field under their profile, enforcing that the user ID in the path matches the authenticated user's ID
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow a user to get a field under their profile
      allow get: if isSignedIn() && isOwner(userId);

      // Allow a user to update a field under their profile, ensuring the user ID in the path matches the authenticated user's ID and the userId field is immutable
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;

      // Allow a user to delete a field under their profile
      allow delete: if isExistingOwner(userId);

      // Allow a user to list fields under their profile
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for expense records associated with a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with ID 'user123' can create an expense record under their profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', ... }
     * @deny (create) User with ID 'user123' cannot create an expense record under another user's profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user456', ... }
     * @allow (get) User with ID 'user123' can read an expense record under their profile.
     *   - auth: { uid: 'user123' }
     * @deny (get) User with ID 'user456' cannot read an expense record under the profile of user 'user123'.
     *   - auth: { uid: 'user456' }
     * @principle Enforces document ownership for writes and reads, ensuring users can only access their own data.
     */
    match /users/{userId}/expenses/{expenseId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create an expense record under their profile, enforcing that the user ID in the path matches the authenticated user's ID
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow a user to get an expense record under their profile
      allow get: if isSignedIn() && isOwner(userId);

      // Allow a user to update an expense record under their profile, ensuring the user ID in the path matches the authenticated user's ID and the userId field is immutable
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;

      // Allow a user to delete an expense record under their profile
      allow delete: if isExistingOwner(userId);

      // Allow a user to list expense records under their profile
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for tasks associated with a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID 'user123' can create a task under their profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', ... }
     * @deny (create) User with ID 'user123' cannot create a task under another user's profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user456', ... }
     * @allow (get) User with ID 'user123' can read a task under their profile.
     *   - auth: { uid: 'user123' }
     * @deny (get) User with ID 'user456' cannot read a task under the profile of user 'user123'.
     *   - auth: { uid: 'user456' }
     * @principle Enforces document ownership for writes and reads, ensuring users can only access their own data.
     */
    match /users/{userId}/tasks/{taskId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create a task under their profile, enforcing that the user ID in the path matches the authenticated user's ID
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow a user to get a task under their profile
      allow get: if isSignedIn() && isOwner(userId);

      // Allow a user to update a task under their profile, ensuring the user ID in the path matches the authenticated user's ID and the userId field is immutable
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;

      // Allow a user to delete a task under their profile
      allow delete: if isExistingOwner(userId);

      // Allow a user to list tasks under their profile
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces access control for growth data associated with a field and user.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) User with ID 'user123' can create growth data under their field.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { fieldId: 'field456', ... }  (assuming field456 is under user123)
     * @deny (create) User with ID 'user123' cannot create growth data under another user's field.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { fieldId: 'field789', ... }  (assuming field789 is NOT under user123)
     * @allow (get) User with ID 'user123' can read growth data under their field.
     *   - auth: { uid: 'user123' }
     * @deny (get) User with ID 'user456' cannot read growth data under the field of user 'user123'.
     *   - auth: { uid: 'user456' }
     * @principle Enforces document ownership for writes and reads, ensuring users can only access their own data.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document (via userId in the path)
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create growth data under their field, enforcing that the user ID in the path matches the authenticated user's ID
      allow create: if isSignedIn() && isOwner(userId);

      // Allow a user to get growth data under their field
      allow get: if isSignedIn() && isOwner(userId);

      // Allow a user to update growth data under their field
      allow update: if isExistingOwner(userId);

      // Allow a user to delete growth data under their field
      allow delete: if isExistingOwner(userId);

      // Allow a user to list growth data under their field
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) Anyone can read market price data.
     *   - auth: null
     * @deny (create, update, delete) Only admins can create, update, or delete market price data (TODO: Implement admin role).
     *   - auth: { uid: 'user123' }
     * @principle Allows public read access with restricted write access.
     */
    match /marketPrices/{marketPriceId} {
      // Allow anyone to read market price data
      allow get, list: if true;

      // Only admins can create, update, or delete market price data (TODO: Implement admin role)
      allow create, update, delete: if false; // TODO: Implement admin role
    }

    /**
     * @description Enforces access control for produce listings created by users.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) User with ID 'user123' can create a produce listing under their profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user123', ... }
     * @deny (create) User with ID 'user123' cannot create a produce listing under another user's profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { userId: 'user456', ... }
     * @allow (get) User with ID 'user123' can read a produce listing under their profile.
     *   - auth: { uid: 'user123' }
     * @deny (get) User with ID 'user456' cannot read a produce listing under the profile of user 'user123'.
     *   - auth: { uid: 'user456' }
     * @principle Enforces document ownership for writes and reads, ensuring users can only access their own data.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create a produce listing under their profile, enforcing that the user ID in the path matches the authenticated user's ID
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow a user to get a produce listing under their profile
      allow get: if isSignedIn() && isOwner(userId);

      // Allow a user to update a produce listing under their profile, ensuring the user ID in the path matches the authenticated user's ID and the userId field is immutable
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;

      // Allow a user to delete a produce listing under their profile
      allow delete: if isExistingOwner(userId);

      // Allow a user to list produce listings under their profile
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows any authenticated user to create feedback.
     * @path /feedbacks/{feedbackId}
     * @allow (create) Any signed-in user can create feedback.
     *   - auth: { uid: 'user123' }
     * @deny (get, list, update, delete) Only admins can read, list, update, or delete feedback (TODO: Implement admin role).
     *   - auth: { uid: 'user123' }
     * @principle Allows public write access (for authenticated users) with restricted read access.
     */
    match /feedbacks/{feedbackId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow any signed-in user to create feedback
      allow create: if isSignedIn();

      // Only admins can read, list, update, or delete feedback (TODO: Implement admin role)
      allow get, list, update, delete: if false; // TODO: Implement admin role
    }
  }
}