/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private data,
 *              while allowing public read access to market prices.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /users/{userId}/fields/{fieldId}: Stores field data. Only the owning user can read/write.
 * - /users/{userId}/expenses/{expenseId}: Stores expense data. Only the owning user can read/write.
 * - /users/{userId}/tasks/{taskId}: Stores task data. Only the owning user can read/write.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Stores growth data. Only the owning user can read/write.
 * - /marketPrices/{marketPriceId}: Stores market price data. Publicly readable, but writes are disallowed (TODO: implement role-based writes).
 * - /users/{userId}/produceListings/{produceListingId}: Stores produce listings. Only the owning user can read/write.
 * - /feedbacks/{feedbackId}: Stores user feedback. Any authenticated user can submit feedback.
 *
 * Key Security Decisions:
 * - Strict user ownership: Most data is private and only accessible to the owning user.
 * - No user listing: Listing all users is not permitted.
 * - Market prices are publicly readable: This allows anonymous users to view market data.
 * - Feedback is publicly writable by logged in users.
 *
 * Denormalization for Authorization:
 * - User-owned documents have a `userId` field that MUST match the path. This is enforced on create and update.
 *   Example: A document in `/users/user123/fields/field456` must have `userId: "user123"`.
 *
 * Structural Segregation:
 * - Private user data is stored under the /users/{userId} collection, separate from public market data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own profile where userId matches auth.uid.
     * @allow (get, update, delete) Authenticated user can get, update, or delete their own profile.
     * @deny (create) Authenticated user attempts to create a profile with a mismatched userId.
     * @deny (get, update, delete) Authenticated user attempts to get, update, or delete another user's profile.
     * @principle Enforces document ownership and validates relational integrity (userId in path must match document.id).
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to field data associated with a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) Authenticated user creates a field under their user ID.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, or delete their own fields.
     * @deny (create) Authenticated user attempts to create a field under another user's ID.
     * @deny (get, list, update, delete) Authenticated user attempts to get, list, update, or delete another user's fields.
     * @principle Enforces document ownership and validates relational integrity (userId in path must match document.userId).
     */
    match /users/{userId}/fields/{fieldId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to expense records associated with a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) Authenticated user creates an expense record under their user ID.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, or delete their own expense records.
     * @deny (create) Authenticated user attempts to create an expense record under another user's ID.
     * @deny (get, list, update, delete) Authenticated user attempts to get, list, update, or delete another user's expense records.
     * @principle Enforces document ownership and validates relational integrity (userId in path must match document.userId).
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks associated with a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) Authenticated user creates a task under their user ID.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, or delete their own tasks.
     * @deny (create) Authenticated user attempts to create a task under another user's ID.
     * @deny (get, list, update, delete) Authenticated user attempts to get, list, update, or delete another user's tasks.
     * @principle Enforces document ownership and validates relational integrity (userId in path must match document.userId).
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to growth data for a specific field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) Authenticated user creates growth data under their field ID.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, or delete their own growth data.
     * @deny (create) Authenticated user attempts to create growth data under another user's or field's ID.
     * @deny (get, list, update, delete) Authenticated user attempts to get, list, update, or delete another user's or field's growth data.
     * @principle Enforces document ownership and validates relational integrity (userId and fieldId in path must match document.userId and document.fieldId).
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && true; // Relaxed relational integrity during prototyping
      allow update: if isExistingOwner(userId) && true; // Relaxed relational integrity during prototyping
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) Anyone can read market prices.
     * @deny (create, update, delete) No one can create, update, or delete market prices (TODO: Implement role-based writes for admins).
     * @principle Allows public read access but restricts write access.
     */
    match /marketPrices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based writes
    }

    /**
     * @description Controls access to produce listings created by users.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) Authenticated user creates a produce listing under their user ID.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, or delete their own produce listings.
     * @deny (create) Authenticated user attempts to create a produce listing under another user's ID.
     * @deny (get, list, update, delete) Authenticated user attempts to get, list, update, or delete another user's produce listings.
     * @principle Enforces document ownership and validates relational integrity (userId in path must match document.userId).
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user feedback submissions.
     * @path /feedbacks/{feedbackId}
     * @allow (create) Any authenticated user can create feedback.
     * @deny (get, list, update, delete) No one can get, list, update or delete feedback.
     * @principle Allows public write access for authenticated users and restricts all other access.
     */
    match /feedbacks/{feedbackId} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow create: if isSignedIn();
        allow get: if false;
        allow list: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}