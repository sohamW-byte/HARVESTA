rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user is signed in and the user ID matches the document ID.
     * @allow (create) if the user is signed in and the user ID matches the requested document ID.
     * @deny list: Listing all users is not allowed.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to field data associated with a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (get, update, delete) if the user is signed in and the user ID matches the document ID.
     * @allow (create) if the user is signed in and the user ID matches the requested document ID.
     * @deny list: Only the owner can list their own fields.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/fields/{fieldId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to expense records associated with a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (get, update, delete) if the user is signed in and the user ID matches the document ID.
     * @allow (create) if the user is signed in and the user ID matches the requested document ID.
     * @deny list: Only the owner can list their own expenses.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks associated with a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (get, update, delete) if the user is signed in and the user ID matches the document ID.
     * @allow (create) if the user is signed in and the user ID matches the requested document ID.
     * @deny list: Only the owner can list their own tasks.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to growth data for a specific field, associated with a user.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (get, update, delete) if the user is signed in and the user ID matches the document ID.
     * @allow (create) if the user is signed in and the user ID matches the requested document ID.
     * @deny list: Only the owner can list their own growth data.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow get, list: Market prices are publicly readable.
     * @deny create, update, delete: Writing market prices is not allowed.
     * @principle Allows public read access while restricting write access.
     */
    match /marketPrices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to produce listings created by users.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (get, update, delete) if the user is signed in and the user ID matches the document ID.
     * @allow (create) if the user is signed in and the user ID matches the requested document ID.
     * @deny list: Only the owner can list their own produce listings.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user feedback submissions.
     * @path /feedbacks/{feedbackId}
     * @allow create: Any authenticated user can submit feedback.
     * @deny get, list, update, delete: Reading, listing, updating, and deleting feedback are not allowed.
     * @principle Allows authenticated users to create feedback while restricting other operations.
     */
    match /feedbacks/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list, update, delete: if false;
      allow create: if isSignedIn();
    }
  }
}