/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data
 * (fields, expenses, tasks, produce listings, and growth data). Market prices
 * are public. Feedback is public for authenticated users.  The rules are designed
 * to be highly secure from an authorization standpoint but flexible on data shapes
 * to allow for rapid iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/fields/{fieldId}: Stores field data associated with a user.
 * - /users/{userId}/expenses/{expenseId}: Stores expense records associated with a user.
 * - /users/{userId}/tasks/{taskId}: Stores tasks associated with a user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Stores growth data for a specific field.
 * - /marketPrices/{marketPriceId}: Stores market price data for different crops (public).
 * - /users/{userId}/produceListings/{produceListingId}: Stores produce listings created by users.
 * - /feedbacks/{feedbackId}: Stores user feedback submissions.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user (path-based ownership).
 * - Market prices are publicly readable.
 * - Feedback can be created by any authenticated user.
 * - Data validation is minimized for prototyping, focusing on authorization and relational integrity.
 * - Listing of user documents is allowed for the owner only.
 *
 * Denormalization for Authorization:
 * To simplify rules and improve performance, ownership is enforced by requiring the `userId`
 * in subcollection documents to match the `userId` in the path. This avoids the need for
 * expensive `get()` calls to verify ownership.
 *
 * Structural Segregation:
 * Data is segregated into collections based on type and access requirements. User-specific data
 * is nested under the `/users/{userId}` collection, while public data (market prices) is stored
 * in a top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      //function isOwner(userId) {
      //  return request.auth.uid == userId;
      //}
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id; // Enforce immutability of userId
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for field data associated with a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) User with ID 'user123' can create a field for their profile.
     * @allow (get) User with ID 'user123' can read a field for their profile.
     * @allow (update) User with ID 'user123' can update a field for their profile.
     * @allow (delete) User with ID 'user123' can delete a field for their profile.
     * @deny (create) User with ID 'user456' cannot create a field for 'user123'.
     * @deny (get) User with ID 'user456' cannot read a field for 'user123'.
     * @principle Enforces document ownership for fields.
     */
    match /users/{userId}/fields/{fieldId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId; //Enforce immutability of userId
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for expense records associated with a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with ID 'user123' can create an expense for their profile.
     * @allow (get) User with ID 'user123' can read an expense for their profile.
     * @allow (update) User with ID 'user123' can update an expense for their profile.
     * @allow (delete) User with ID 'user123' can delete an expense for their profile.
     * @deny (create) User with ID 'user456' cannot create an expense for 'user123'.
     * @deny (get) User with ID 'user456' cannot read an expense for 'user123'.
     * @principle Enforces document ownership for expenses.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId; //Enforce immutability of userId
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for tasks associated with a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID 'user123' can create a task for their profile.
     * @allow (get) User with ID 'user123' can read a task for their profile.
     * @allow (update) User with ID 'user123' can update a task for their profile.
     * @allow (delete) User with ID 'user123' can delete a task for their profile.
     * @deny (create) User with ID 'user456' cannot create a task for 'user123'.
     * @deny (get) User with ID 'user456' cannot read a task for 'user123'.
     * @principle Enforces document ownership for tasks.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId; //Enforce immutability of userId
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for growth data associated with a field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) User with ID 'user123' can create growth data for their field.
     * @allow (get) User with ID 'user123' can read growth data for their field.
     * @allow (update) User with ID 'user123' can update growth data for their field.
     * @allow (delete) User with ID 'user123' can delete growth data for their field.
     * @deny (create) User with ID 'user456' cannot create growth data for 'user123'.
     * @deny (get) User with ID 'user456' cannot read growth data for 'user123'.
     * @principle Enforces document ownership for growth data.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.fieldId == fieldId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.fieldId == fieldId; //Enforce immutability of fieldId
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow (get) Any user can read market price data.
     * @allow (list) Any user can list market price data.
     * @deny (create) No user can create market price data via the client.
     * @deny (update) No user can update market price data via the client.
     * @deny (delete) No user can delete market price data via the client.
     * @principle Allows public read access to market price data.  Writes should be handled server-side.
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces access control for produce listings created by users.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) User with ID 'user123' can create a produce listing for their profile.
     * @allow (get) User with ID 'user123' can read a produce listing for their profile.
     * @allow (update) User with ID 'user123' can update a produce listing for their profile.
     * @allow (delete) User with ID 'user123' can delete a produce listing for their profile.
     * @deny (create) User with ID 'user456' cannot create a produce listing for 'user123'.
     * @deny (get) User with ID 'user456' cannot read a produce listing for 'user123'.
     * @principle Enforces document ownership for produce listings.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId; //Enforce immutability of userId
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to create feedback.
     * @path /feedbacks/{feedbackId}
     * @allow (create) Any authenticated user can create feedback.
     * @deny (get) No user can read feedback via the client.
     * @deny (list) No user can list feedback via the client.
     * @deny (update) No user can update feedback via the client.
     * @deny (delete) No user can delete feedback via the client.
     * @principle Allows public write access to feedback for authenticated users.  Reads should be handled server-side.
     */
    match /feedbacks/{feedbackId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}