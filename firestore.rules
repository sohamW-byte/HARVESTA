/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *              with public read access to market prices and public write access to feedback.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /users/{userId}/fields/{fieldId}: Field data, accessible only by the owning user.
 * - /users/{userId}/expenses/{expenseId}: Expense records, accessible only by the owning user.
 * - /users/{userId}/tasks/{taskId}: Task data, accessible only by the owning user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Growth data, accessible only by the owning user.
 * - /marketPrices/{marketPriceId}: Market price data, publicly readable.
 * - /users/{userId}/produceListings/{produceListingId}: Produce listings, accessible only by the owning user.
 * - /feedbacks/{feedbackId}: User feedback, publicly writable by authenticated users.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the /marketPrices collection.
 * - Public write access is granted to the /feedbacks collection for authenticated users.
 * - All other collections follow a strict owner-only access pattern.
 *
 * Denormalization for Authorization:
 * - The userId is included in the path for all user-owned data, eliminating the need for `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, ensuring only the user can read and write their own data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     * @deny (get) User with ID 'user456' cannot read user 'user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures field data, ensuring only the owning user can read and write.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) User with ID 'user123' can create a field under their profile.
     * @allow (get) User with ID 'user123' can read a field under their profile.
     * @allow (update) User with ID 'user123' can update a field under their profile.
     * @allow (delete) User with ID 'user123' can delete a field under their profile.
     * @deny (create) User with ID 'user456' cannot create a field for user 'user123'.
     * @deny (get) User with ID 'user456' cannot read a field belonging to user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/fields/{fieldId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures expense records, ensuring only the owning user can read and write.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with ID 'user123' can create an expense record under their profile.
     * @allow (get) User with ID 'user123' can read an expense record under their profile.
     * @allow (update) User with ID 'user123' can update an expense record under their profile.
     * @allow (delete) User with ID 'user123' can delete an expense record under their profile.
     * @deny (create) User with ID 'user456' cannot create an expense record for user 'user123'.
     * @deny (get) User with ID 'user456' cannot read an expense record belonging to user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures task data, ensuring only the owning user can read and write.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID 'user123' can create a task under their profile.
     * @allow (get) User with ID 'user123' can read a task under their profile.
     * @allow (update) User with ID 'user123' can update a task under their profile.
     * @allow (delete) User with ID 'user123' can delete a task under their profile.
     * @deny (create) User with ID 'user456' cannot create a task for user 'user123'.
     * @deny (get) User with ID 'user456' cannot read a task belonging to user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures growth data, ensuring only the owning user can read and write through the hierarchical path.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) User with ID 'user123' can create growth data under their field.
     * @allow (get) User with ID 'user123' can read growth data under their field.
     * @allow (update) User with ID 'user123' can update growth data under their field.
     * @allow (delete) User with ID 'user123' can delete growth data under their field.
     * @deny (create) User with ID 'user456' cannot create growth data for user 'user123'.
     * @deny (get) User with ID 'user456' cannot read growth data belonging to user 'user123'.
     * @principle Enforces document ownership through path-based access control.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Provides public read access to market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow (get) Any user can read market price data.
     * @allow (list) Any user can list market price data.
     * @deny (create) No one can create market price data through client-side rules.
     * @deny (update) No one can update market price data through client-side rules.
     * @deny (delete) No one can delete market price data through client-side rules.
     * @principle Allows public reads for market information.
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures produce listings, ensuring only the owning user can read and write.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) User with ID 'user123' can create a produce listing under their profile.
     * @allow (get) User with ID 'user123' can read a produce listing under their profile.
     * @allow (update) User with ID 'user123' can update a produce listing under their profile.
     * @allow (delete) User with ID 'user123' can delete a produce listing under their profile.
     * @deny (create) User with ID 'user456' cannot create a produce listing for user 'user123'.
     * @deny (get) User with ID 'user456' cannot read a produce listing belonging to user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows any authenticated user to submit feedback.
     * @path /feedbacks/{feedbackId}
     * @allow (create) Any authenticated user can create a feedback entry.
     * @deny (get) No one can get a feedback entry through client-side rules.
     * @deny (list) No one can list feedback entries through client-side rules.
     * @deny (update) No one can update a feedback entry through client-side rules.
     * @deny (delete) No one can delete a feedback entry through client-side rules.
     * @principle Allows public writes for feedback submissions by authenticated users.
     */
    match /feedbacks/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}