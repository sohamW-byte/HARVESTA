/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data nested under `/users/{userId}`.
 * Global collections like `/marketPrices` and `/feedbacks` have specific read/write constraints.
 * All write operations are carefully validated to ensure data integrity and prevent unauthorized modifications.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /users/{userId}/fields/{fieldId}: Stores field data for each user.
 * - /users/{userId}/expenses/{expenseId}: Stores expense data for each user.
 * - /users/{userId}/tasks/{taskId}: Stores task data for each user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Stores growth data for specific fields.
 * - /marketPrices/{marketPriceId}: Stores global market price information.
 * - /users/{userId}/produceListings/{produceListingId}: Stores produce listings created by individual users.
 * - /feedbacks/{feedbackId}: Stores user feedback.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Market prices are publicly readable but only writable by authorized users (TODO: define authorization).
 * - User feedback is publicly writable by authenticated users.
 * - Data written to user subcollections must have the correct `userId` to prevent cross-user data manipulation.
 *
 * Denormalization for Authorization:
 * - The 'userId' is included in documents within the `/users/{userId}` subcollections to ensure ownership integrity and allow for simple `isOwner()` checks.
 *
 * Structural Segregation:
 * - Private user data is stored under the `/users/{userId}` tree.
 * - Public market price data is stored in the top-level `/marketPrices` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * Ensures that the document exists before authorizing destructive operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that the user ID in the path matches the 'userId' field in the data on create operations.
     * On update operations, it ensures that the 'userId' field remains immutable.
     */
    function isValidOwner(userId) {
        return request.resource.data.id == userId;
    }

    /**
     * @description Rule for user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - Unauthorized user attempts to create a profile with a mismatched user ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isValidOwner(userId);
      allow update: if isExistingOwner(userId) && (request.resource.data.id == resource.data.id);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for field documents under a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own fields.
     * @deny (create, get, list, update, delete) - Unauthorized user attempts to access fields belonging to another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/fields/{fieldId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && (request.resource.data.userId == userId);
      allow update: if isExistingOwner(userId) && (request.resource.data.userId == resource.data.userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for expense documents under a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own expenses.
     * @deny (create, get, list, update, delete) - Unauthorized user attempts to access expenses belonging to another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && (request.resource.data.userId == userId);
      allow update: if isExistingOwner(userId) && (request.resource.data.userId == resource.data.userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for task documents under a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own tasks.
     * @deny (create, get, list, update, delete) - Unauthorized user attempts to access tasks belonging to another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && (request.resource.data.userId == userId);
      allow update: if isExistingOwner(userId) && (request.resource.data.userId == resource.data.userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for growth data documents under a field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage growth data for their own fields.
     * @deny (create, get, list, update, delete) - Unauthorized user attempts to access growth data belonging to another user's field.
     * @principle Enforces document ownership for all operations through hierarchical path.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && (request.resource.data.fieldId == fieldId);
      allow update: if isExistingOwner(userId) && (request.resource.data.fieldId == resource.data.fieldId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for market price documents.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) - Anyone can read market prices.
     * @deny (create, update, delete) - Only authorized users can write market prices (TODO: Define authorization method).
     * @principle Allows public read access but restricts write access.
     */
    match /marketPrices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Rule for produce listing documents under a user.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own produce listings.
     * @deny (create, get, list, update, delete) - Unauthorized user attempts to access produce listings belonging to another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && (request.resource.data.userId == userId);
      allow update: if isExistingOwner(userId) && (request.resource.data.userId == resource.data.userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for feedback documents.
     * @path /feedbacks/{feedbackId}
     * @allow (get, list) - Anyone can read feedback.
     * @allow (create) - Any authenticated user can create feedback.
     * @deny (update, delete) - No one can update or delete feedback.
     * @principle Allows public read and create access but restricts update and delete access.
     */
    match /feedbacks/{feedbackId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}