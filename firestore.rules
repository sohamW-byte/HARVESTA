/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *              with public read access to market prices and open write access for user feedback.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /users/{userId}/fields/{fieldId}: Stores field data. Only the owner user can read/write.
 * - /users/{userId}/expenses/{expenseId}: Stores expense data. Only the owner user can read/write.
 * - /users/{userId}/tasks/{taskId}: Stores task data. Only the owner user can read/write.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Stores growth data. Only the owner user can read/write.
 * - /marketPrices/{marketPriceId}: Stores market price data. Public read access, no write access in this version.
 * - /users/{userId}/produceListings/{produceListingId}: Stores produce listings. Only the owner can read/write.
 * - /feedbacks/{feedbackId}: Stores user feedback. Any authenticated user can submit feedback.
 *
 * Key Security Decisions:
 * - Users can only access their own data, enforced through path-based ownership (`/users/{userId}`).
 * - Market prices are publicly readable.
 * - User listing is disallowed.
 * - Write access to MarketPrices is denied.
 * - Any authenticated user can create feedback, but cannot read or modify existing feedback.
 *
 * Denormalization for Authorization:
 * - The `userId` is embedded in the path for user-owned data, enabling simple `isOwner()` checks without extra reads.
 *   For example, the rule `allow read: if isOwner(userId);` on `/users/{userId}/fields/{fieldId}` can directly
 *   verify ownership without needing to fetch the user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete their own profile if the userId matches their auth.uid.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (update, delete) - If the userId does not match the authenticated user's ID or the document doesn't exist.
     * @deny (list) - Listing users is not allowed.
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to field data associated with a user.
     * @path /databases/{database}/documents/users/{userId}/fields/{fieldId}
     * @allow (create) - Authenticated user can create a field under their user ID.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete fields under their user ID.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (update, delete) - If the userId does not match the authenticated user's ID or the document doesn't exist.
     * @principle Enforces document ownership for fields and prevents unauthorized access.
     */
    match /users/{userId}/fields/{fieldId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to expense records associated with a user.
     * @path /databases/{database}/documents/users/{userId}/expenses/{expenseId}
     * @allow (create) - Authenticated user can create an expense under their user ID.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete expenses under their user ID.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (update, delete) - If the userId does not match the authenticated user's ID or the document doesn't exist.
     * @principle Enforces document ownership for expenses and prevents unauthorized access.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks associated with a user.
     * @path /databases/{database}/documents/users/{userId}/tasks/{taskId}
     * @allow (create) - Authenticated user can create a task under their user ID.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete tasks under their user ID.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (update, delete) - If the userId does not match the authenticated user's ID or the document doesn't exist.
     * @principle Enforces document ownership for tasks and prevents unauthorized access.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to growth data associated with a field.
     * @path /databases/{database}/documents/users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) - Authenticated user can create growth data under their field.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete growth data under their field.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (update, delete) - If the userId does not match the authenticated user's ID or the document doesn't exist.
     * @principle Enforces hierarchical ownership for growth data and prevents unauthorized access.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to market price data.
     * @path /databases/{database}/documents/marketPrices/{marketPriceId}
     * @allow (get, list) - Market prices are publicly readable.
     * @deny (create, update, delete) - Market prices cannot be created, updated, or deleted through client-side rules.
     * @principle Provides public read access to market prices while restricting write access.
     */
    match /marketPrices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to produce listings created by users.
     * @path /databases/{database}/documents/users/{userId}/produceListings/{produceListingId}
     * @allow (create) - Authenticated user can create a produce listing under their user ID.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete produce listings under their user ID.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (update, delete) - If the userId does not match the authenticated user's ID or the document doesn't exist.
     * @principle Enforces document ownership for produce listings and prevents unauthorized access.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user feedback submissions.
     * @path /databases/{database}/documents/feedbacks/{feedbackId}
     * @allow (create) - Any authenticated user can create feedback.
     * @deny (get, list, update, delete) - Feedback cannot be read, listed, updated, or deleted through client-side rules.
     * @principle Allows any authenticated user to submit feedback, but restricts all other operations.
     */
    match /feedbacks/{feedbackId} {
      allow create: if request.auth != null;
      allow get, list, update, delete: if false;
    }
  }
}