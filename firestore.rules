/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data, with public read access to market prices and feedback.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/fields/{fieldId}: Field data, owned by the user.
 * - /users/{userId}/expenses/{expenseId}: Expense records, owned by the user.
 * - /users/{userId}/tasks/{taskId}: Tasks, owned by the user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Growth data for a specific field, owned by the user.
 * - /marketPrices/{marketPriceId}: Market price data, publicly readable.
 * - /users/{userId}/produceListings/{produceListingId}: Produce listings, owned by the user.
 * - /feedbacks/{feedbackId}: User feedback submissions, publicly readable and writable by authenticated users.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Market prices are publicly readable but only writable by a service account (not implemented in this prototyping phase).
 * - Feedback is publicly readable and writable by authenticated users.
 * - All other data is strictly user-owned.
 *
 * Denormalization for Authorization:
 * - All user-owned documents include a `userId` field that must match the path-based `userId`. This is enforced on creation and immutability is enforced on updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get) - User with UID 'user123' can read their profile at /users/user123.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (update) - User with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) - User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own fields.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) - User with UID 'user123' can create a field under /users/user123/fields/field1.
     * @allow (get) - User with UID 'user123' can read their field at /users/user123/fields/field1.
     * @allow (update) - User with UID 'user123' can update their field at /users/user123/fields/field1.
     * @allow (delete) - User with UID 'user123' can delete their field at /users/user123/fields/field1.
     * @deny (create) - User with UID 'user456' cannot create a field under /users/user123/fields/field1.
     * @deny (update) - User with UID 'user456' cannot update the field at /users/user123/fields/field1.
     * @deny (delete) - User with UID 'user456' cannot delete the field at /users/user123/fields/field1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/fields/{fieldId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own expenses.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User with UID 'user123' can create an expense under /users/user123/expenses/expense1.
     * @allow (get) - User with UID 'user123' can read their expense at /users/user123/expenses/expense1.
     * @allow (update) - User with UID 'user123' can update their expense at /users/user123/expenses/expense1.
     * @allow (delete) - User with UID 'user123' can delete their expense at /users/user123/expenses/expense1.
     * @deny (create) - User with UID 'user456' cannot create an expense under /users/user123/expenses/expense1.
     * @deny (update) - User with UID 'user456' cannot update the expense at /users/user123/expenses/expense1.
     * @deny (delete) - User with UID 'user456' cannot delete the expense at /users/user123/expenses/expense1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User with UID 'user123' can create a task under /users/user123/tasks/task1.
     * @allow (get) - User with UID 'user123' can read their task at /users/user123/tasks/task1.
     * @allow (update) - User with UID 'user123' can update their task at /users/user123/tasks/task1.
     * @allow (delete) - User with UID 'user123' can delete their task at /users/user123/tasks/task1.
     * @deny (create) - User with UID 'user456' cannot create a task under /users/user123/tasks/task1.
     * @deny (update) - User with UID 'user456' cannot update the task at /users/user123/tasks/task1.
     * @deny (delete) - User with UID 'user456' cannot delete the task at /users/user123/tasks/task1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage growth data for their fields.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) - User with UID 'user123' can create growth data under /users/user123/fields/field1/growthData/growthData1.
     * @allow (get) - User with UID 'user123' can read their growth data at /users/user123/fields/field1/growthData/growthData1.
     * @allow (update) - User with UID 'user123' can update their growth data at /users/user123/fields/field1/growthData/growthData1.
     * @allow (delete) - User with UID 'user123' can delete their growth data at /users/user123/fields/field1/growthData/growthData1.
     * @deny (create) - User with UID 'user456' cannot create growth data under /users/user123/fields/field1/growthData/growthData1.
     * @deny (update) - User with UID 'user456' cannot update the growth data at /users/user123/fields/field1/growthData/growthData1.
     * @deny (delete) - User with UID 'user456' cannot delete the growth data at /users/user123/fields/field1/growthData/growthData1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to market price data. Write access should be restricted to a trusted source (e.g., service account).
     * @path /marketPrices/{marketPriceId}
     * @allow (get) - Any user can read market price data.
     * @allow (list) - Any user can list market price data.
     * @deny (create) - No user can create market price data.
     * @deny (update) - No user can update market price data.
     * @deny (delete) - No user can delete market price data.
     * @principle Allows public read access with restricted write access.
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Restrict to service account
      allow update: if false; // TODO: Restrict to service account
      allow delete: if false; // TODO: Restrict to service account
    }

    /**
     * @description Allows users to manage their own produce listings.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) - User with UID 'user123' can create a produce listing under /users/user123/produceListings/listing1.
     * @allow (get) - User with UID 'user123' can read their produce listing at /users/user123/produceListings/listing1.
     * @allow (update) - User with UID 'user123' can update their produce listing at /users/user123/produceListings/listing1.
     * @allow (delete) - User with UID 'user123' can delete their produce listing at /users/user123/produceListings/listing1.
     * @deny (create) - User with UID 'user456' cannot create a produce listing under /users/user123/produceListings/listing1.
     * @deny (update) - User with UID 'user456' cannot update the produce listing at /users/user123/produceListings/listing1.
     * @deny (delete) - User with UID 'user456' cannot delete the produce listing at /users/user123/produceListings/listing1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated users to submit feedback.  Public read access.
     * @path /feedbacks/{feedbackId}
     * @allow (create) - Any authenticated user can create a feedback document.
     * @allow (get) - Any user can read feedback data.
     * @allow (list) - Any user can list feedback data.
     * @deny (update) - No user can update feedback data.
     * @deny (delete) - No user can delete feedback data.
     * @principle Allows public read and authenticated write access.
     */
    match /feedbacks/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}