rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Grants access to user profile information.
     * @path /users/{userId}
     * @allow (create, update, get, delete) if the user is the owner.
     * @deny (create, update, get, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      // Allow the user to create their own document.
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Owner can read, update and delete
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
      allow list: if false; // No listing of all users.
    }

    /**
     * @description Grants access to field data associated with a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create, update, get, delete) if the user is the owner.
     * @deny (create, update, get, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and reads, path-based.
     */
    match /users/{userId}/fields/{fieldId} {
      // Allow the user to create their own document.
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Owner can read, update and delete
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
      allow list: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Grants access to expense records associated with a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create, update, get, delete) if the user is the owner.
     * @deny (create, update, get, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and reads, path-based.
     */
    match /users/{userId}/expenses/{expenseId} {
      // Allow the user to create their own document.
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Owner can read, update and delete
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
      allow list: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Grants access to tasks associated with a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create, update, get, delete) if the user is the owner.
     * @deny (create, update, get, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and reads, path-based.
     */
    match /users/{userId}/tasks/{taskId} {
      // Allow the user to create their own document.
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Owner can read, update and delete
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
      allow list: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Grants access to growth data for a specific field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create, update, get, delete) if the user is the owner.
     * @deny (create, update, get, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and reads, path-based.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      // Allow the user to create their own document.
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Owner can read, update and delete
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
      allow list: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Grants public read access to market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Allows public read access but restricts write access.
     */
    match /marketPrices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to produce listings created by users.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create, update, get, delete) if the user is the owner.
     * @deny (create, update, get, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and reads, path-based.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      // Allow the user to create their own document.
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Owner can read, update and delete
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
      allow list: if isSignedIn() && request.auth.uid == userId;
    }
  }
}