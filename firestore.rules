rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123.
     * @allow (get) - User with UID 'user123' can read their profile at /users/user123.
     * @allow (list) - Not applicable for individual user documents.
     * @allow (delete) - User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (update) - User with UID 'user456' cannot update the profile at /users/user123.
     * @deny (get) - User with UID 'user456' cannot read the profile at /users/user123.
     * @deny (delete) - User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for writes and reads, validating relational integrity.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && resource.data != null && isOwner(userId);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages field data associated with a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) - User with UID 'user123' can create a field under /users/user123/fields/field1 if request.auth.uid == 'user123'.
     * @allow (update) - User with UID 'user123' can update their field under /users/user123/fields/field1.
     * @allow (get) - User with UID 'user123' can read their field under /users/user123/fields/field1.
     * @allow (list) - User with UID 'user123' can list their fields under /users/user123/fields.
     * @allow (delete) - User with UID 'user123' can delete their field under /users/user123/fields/field1.
     * @deny (create) - User with UID 'user456' cannot create a field under /users/user123/fields/field1.
     * @deny (update) - User with UID 'user456' cannot update the field under /users/user123/fields/field1.
     * @deny (get) - User with UID 'user456' cannot read the field under /users/user123/fields/field1.
     * @deny (delete) - User with UID 'user456' cannot delete the field under /users/user123/fields/field1.
     * @principle Enforces document ownership for writes and reads, validating relational integrity.
     */
    match /users/{userId}/fields/{fieldId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isSignedIn() && resource.data != null && isOwner(userId);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages expense records associated with a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User with UID 'user123' can create an expense under /users/user123/expenses/expense1 if request.auth.uid == 'user123'.
     * @allow (update) - User with UID 'user123' can update their expense under /users/user123/expenses/expense1.
     * @allow (get) - User with UID 'user123' can read their expense under /users/user123/expenses/expense1.
     * @allow (list) - User with UID 'user123' can list their expenses under /users/user123/expenses.
     * @allow (delete) - User with UID 'user123' can delete their expense under /users/user123/expenses/expense1.
     * @deny (create) - User with UID 'user456' cannot create an expense under /users/user123/expenses/expense1.
     * @deny (update) - User with UID 'user456' cannot update the expense under /users/user123/expenses/expense1.
     * @deny (get) - User with UID 'user456' cannot read the expense under /users/user123/expenses/expense1.
     * @deny (delete) - User with UID 'user456' cannot delete the expense under /users/user123/expenses/expense1.
     * @principle Enforces document ownership for writes and reads, validating relational integrity.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isSignedIn() && resource.data != null && isOwner(userId);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages tasks associated with a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - User with UID 'user123' can create a task under /users/user123/tasks/task1 if request.auth.uid == 'user123'.
     * @allow (update) - User with UID 'user123' can update their task under /users/user123/tasks/task1.
     * @allow (get) - User with UID 'user123' can read their task under /users/user123/tasks/task1.
     * @allow (list) - User with UID 'user123' can list their tasks under /users/user123/tasks.
     * @allow (delete) - User with UID 'user123' can delete their task under /users/user123/tasks/task1.
     * @deny (create) - User with UID 'user456' cannot create a task under /users/user123/tasks/task1.
     * @deny (update) - User with UID 'user456' cannot update the task under /users/user123/tasks/task1.
     * @deny (get) - User with UID 'user456' cannot read the task under /users/user123/tasks/task1.
     * @deny (delete) - User with UID 'user456' cannot delete the task under /users/user123/tasks/task1.
     * @principle Enforces document ownership for writes and reads, validating relational integrity.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isSignedIn() && resource.data != null && isOwner(userId);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages growth data for a specific field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) - User with UID 'user123' can create growth data under /users/user123/fields/field1/growthData/data1 if request.auth.uid == 'user123'.
     * @allow (update) - User with UID 'user123' can update their growth data under /users/user123/fields/field1/growthData/data1.
     * @allow (get) - User with UID 'user123' can read their growth data under /users/user123/fields/field1/growthData/data1.
     * @allow (list) - User with UID 'user123' can list their growth data under /users/user123/fields/field1/growthData.
     * @allow (delete) - User with UID 'user123' can delete their growth data under /users/user123/fields/field1/growthData/data1.
     * @deny (create) - User with UID 'user456' cannot create growth data under /users/user123/fields/field1/growthData/data1.
     * @deny (update) - User with UID 'user456' cannot update the growth data under /users/user123/fields/field1/growthData/data1.
     * @deny (get) - User with UID 'user456' cannot read the growth data under /users/user123/fields/field1/growthData/data1.
     * @deny (delete) - User with UID 'user456' cannot delete the growth data under /users/user123/fields/field1/growthData/data1.
     * @principle Enforces document ownership for writes and reads, validating relational integrity.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isSignedIn() && resource.data != null && isOwner(userId);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages market price data for different crops.
     * @path /marketPrices/{marketPriceId}
     * @allow (get) - Any user can read market price data.
     * @allow (list) - Any user can list market price data.
     * @deny (create) - No one can create market price data without specific authorization (e.g., admin role). // TODO: Implement admin role for create, update, delete.
     * @deny (update) - No one can update market price data without specific authorization (e.g., admin role). // TODO: Implement admin role for create, update, delete.
     * @deny (delete) - No one can delete market price data without specific authorization (e.g., admin role). // TODO: Implement admin role for create, update, delete.
     * @principle Allows public read access, restricts write access.
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role check.
      allow update: if false; // TODO: Add admin role check.
      allow delete: if false; // TODO: Add admin role check.
    }

    /**
     * @description Manages produce listings created by users.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) - User with UID 'user123' can create a produce listing under /users/user123/produceListings/listing1 if request.auth.uid == 'user123'.
     * @allow (update) - User with UID 'user123' can update their produce listing under /users/user123/produceListings/listing1.
     * @allow (get) - User with UID 'user123' can read their produce listing under /users/user123/produceListings/listing1.
     * @allow (list) - User with UID 'user123' can list their produce listings under /users/user123/produceListings.
     * @allow (delete) - User with UID 'user123' can delete their produce listing under /users/user123/produceListings/listing1.
     * @deny (create) - User with UID 'user456' cannot create a produce listing under /users/user123/produceListings/listing1.
     * @deny (update) - User with UID 'user456' cannot update the produce listing under /users/user123/produceListings/listing1.
     * @deny (get) - User with UID 'user456' cannot read the produce listing under /users/user123/produceListings/listing1.
     * @deny (delete) - User with UID 'user456' cannot delete the produce listing under /users/user123/produceListings/listing1.
     * @principle Enforces document ownership for writes and reads, validating relational integrity.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isSignedIn() && resource.data != null && isOwner(userId);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}