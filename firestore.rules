/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * while allowing public read access to market data and public write access to feedback data.
 * Authorization relies primarily on path-based checks, with denormalized data
 * used to validate relationships between documents and the user's identity.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/fields/{fieldId}: Field data, owned by the user.
 * - /users/{userId}/expenses/{expenseId}: Expense records, owned by the user.
 * - /users/{userId}/tasks/{taskId}: Task data, owned by the user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Growth data, owned by the user and field.
 * - /marketPrices/{marketPriceId}: Market price data, publicly readable.
 * - /users/{userId}/produceListings/{produceListingId}: Produce listings, owned by the user.
 * - /feedbacks/{feedbackId}: User feedback, publicly writable.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - Market price data is publicly readable to facilitate information sharing.
 * - Feedback data is publicly writable by authenticated users to encourage feedback.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - User-owned documents include a `userId` field that must match the document's path.
 *
 * Structural Segregation:
 * - User-specific data is stored under the /users/{userId} path to ensure clear ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create their own profile at /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2 with matching id.
     * @deny (create) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' cannot create profile for other user at /users/differentUserID.
     * @allow (get) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can read their profile at /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2.
     * @deny (update) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' cannot update another user's profile at /users/differentUserID.
     * @principle Enforces document ownership for writes and path-based ownership.
     */
    match /users/{userId} {
      // Verified user can only create their own profile
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to field data associated with a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create field under their profile at /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/newField with matching userId.
     * @deny (create) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' cannot create field under another user's profile at /users/differentUserID/fields/newField.
     * @allow (get) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can read a field under their profile at /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/field1.
     * @deny (update) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' cannot update a field under another user's profile at /users/differentUserID/fields/field1.
     * @principle Enforces document ownership for writes and path-based ownership.
     */
    match /users/{userId}/fields/{fieldId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to expense records associated with a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create expense under their profile at /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/expenses/newExpense with matching userId.
     * @deny (create) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' cannot create expense under another user's profile at /users/differentUserID/expenses/newExpense.
     * @allow (get) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can read an expense under their profile at /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/expenses/expense1.
     * @deny (update) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' cannot update an expense under another user's profile at /users/differentUserID/expenses/expense1.
     * @principle Enforces document ownership for writes and path-based ownership.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks associated with a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create task under their profile at /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/tasks/newTask with matching userId.
     * @deny (create) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' cannot create task under another user's profile at /users/differentUserID/tasks/newTask.
     * @allow (get) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can read a task under their profile at /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/tasks/task1.
     * @deny (update) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' cannot update a task under another user's profile at /users/differentUserID/tasks/task1.
     * @principle Enforces document ownership for writes and path-based ownership.
     */
    match /users/{userId}/tasks/{taskId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to growth data for a specific field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create growth data under their field at /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/field1/growthData/newGrowthData with matching userId.
     * @deny (create) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' cannot create growth data under another user's field at /users/differentUserID/fields/field1/growthData/newGrowthData.
     * @allow (get) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can read growth data under their field at /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/fields/field1/growthData/growthData1.
     * @deny (update) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' cannot update growth data under another user's field at /users/differentUserID/fields/field1/growthData/growthData1.
     * @principle Enforces document ownership for writes and path-based ownership.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      allow create: if isSignedIn() && isOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/fields/$(fieldId)).data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/fields/$(fieldId)).data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow (get) Any user can read market prices at /marketPrices/marketPrice1.
     * @allow (list) Any user can list market prices at /marketPrices.
     * @deny (create) No one can create market prices (Requires Admin role).
     * @principle Allows public read access to market data.
     */
    match /marketPrices/{marketPriceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Restrict writes to admin role.
    }

    /**
     * @description Controls access to produce listings created by users.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create produce listing under their profile at /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/produceListings/newListing with matching userId.
     * @deny (create) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' cannot create produce listing under another user's profile at /users/differentUserID/produceListings/newListing.
     * @allow (get) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can read a produce listing under their profile at /users/cEaZX6lta8aq6kwCfVpdmvoN0Ob2/produceListings/listing1.
     * @deny (update) User with UID 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' cannot update a produce listing under another user's profile at /users/differentUserID/produceListings/listing1.
     * @principle Enforces document ownership for writes and path-based ownership.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user feedback submissions.
     * @path /feedbacks/{feedbackId}
     * @allow (create) Any authenticated user can create feedback at /feedbacks/feedback1.
     * @allow (get) Any user can read feedback at /feedbacks/feedback1.
     * @allow (list) Any user can list feedbacks at /feedbacks.
     * @deny (update) No one can update feedback.
     * @principle Allows public write access to feedback data for authenticated users.
     */
    match /feedbacks/{feedbackId} {
      allow create: if isSignedIn();
      allow get, list: if true;
      allow update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}