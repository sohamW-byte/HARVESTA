/**
  * @fileoverview Firestore Security Rules for the application.
  *
  * Core Philosophy:
  * This ruleset enforces a strict user-ownership model for personal data
  * nested under `/users/{userId}`. Global collections like `/marketPrices`
  * are publicly readable. Feedback submissions are open to authenticated users.
  *
  * Data Structure:
  * - /users/{userId}: User profile information.
  * - /users/{userId}/fields/{fieldId}: Field data owned by a user.
  * - /users/{userId}/expenses/{expenseId}: Expense records owned by a user.
  * - /users/{userId}/tasks/{taskId}: Tasks owned by a user.
  * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Growth data for a field.
  * - /marketPrices/{marketPriceId}: Market price data (publicly readable).
  * - /users/{userId}/produceListings/{produceListingId}: Produce listings owned by a user.
  * - /feedbacks/{feedbackId}: User feedback submissions.
  *
  * Key Security Decisions:
  * - User listing is disallowed.
  * - Market prices are publicly readable.
  * - Feedback submissions are allowed by any authenticated user.
  * - Strict ownership is enforced for all user-owned data via path-based checks
  *   and data validation.
  * - Write operations on market prices are disallowed (assuming admin-only updates are handled externally).
  * - For prototyping, data validation is limited to ownership and relational integrity checks.
  *
  * Denormalization for Authorization:
  *  - The rules rely on path-based ownership (e.g., /users/{userId}/...) to avoid
  *    `get()` calls. The `userId` is also duplicated inside documents to
  *     enable relational integrity checks.
  *
  * Structural Segregation:
  *  - Private user data (fields, expenses, tasks) is stored under the
  *    `/users/{userId}` collection group. This ensures clear separation from
  *    public data like market prices.
  */
 

 rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

   /**
    * @description Secure user profiles. Only the authenticated user can read/write their own profile.
    * @path /users/{userId}
    * @allow (create) - User with UID 'user_abc' can create a profile with id 'user_abc'.
    * @allow (get,update,delete) - User with UID 'user_abc' can get, update, or delete their own profile.
    * @deny (create) - User with UID 'user_xyz' cannot create a profile with id 'user_abc'.
    * @deny (get,update,delete) - User with UID 'user_xyz' cannot get, update, or delete profile 'user_abc'.
    * @principle Enforces document ownership for reads and writes.
    */
   match /users/{userId} {
    function isSignedIn() {
     return request.auth != null;
    }
 

    function isOwner(userId) {
     return request.auth.uid == userId;
    }
 

    function isExistingOwner(userId) {
     return isOwner(userId) && resource != null;
    }
 

    allow get: if isOwner(userId);
    allow list: if false;
    allow create: if isOwner(userId) && request.resource.data.id == userId;
    allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Secure field data for a user. Only the owner can read/write their own fields.
    * @path /users/{userId}/fields/{fieldId}
    * @allow (create) - User with UID 'user_abc' can create a field under /users/user_abc/fields.
    * @allow (get,list,update,delete) - User with UID 'user_abc' can get, list, update, or delete their own fields under /users/user_abc/fields.
    * @deny (create) - User with UID 'user_xyz' cannot create a field under /users/user_abc/fields.
    * @deny (get,list,update,delete) - User with UID 'user_xyz' cannot get, list, update, or delete fields under /users/user_abc/fields.
    * @principle Enforces document ownership for reads and writes.
    */
   match /users/{userId}/fields/{fieldId} {
    function isSignedIn() {
     return request.auth != null;
    }
 

    function isOwner(userId) {
     return request.auth.uid == userId;
    }
 

    function isExistingOwner(userId) {
     return isOwner(userId) && resource != null;
    }
 

    allow get: if isOwner(userId);
    allow list: if isOwner(userId);
    allow create: if isOwner(userId) && request.resource.data.userId == userId;
    allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Secure expense records for a user. Only the owner can read/write their own expenses.
    * @path /users/{userId}/expenses/{expenseId}
    * @allow (create) - User with UID 'user_abc' can create an expense under /users/user_abc/expenses.
    * @allow (get,list,update,delete) - User with UID 'user_abc' can get, list, update, or delete their own expenses under /users/user_abc/expenses.
    * @deny (create) - User with UID 'user_xyz' cannot create an expense under /users/user_abc/expenses.
    * @deny (get,list,update,delete) - User with UID 'user_xyz' cannot get, list, update, or delete expenses under /users/user_abc/expenses.
    * @principle Enforces document ownership for reads and writes.
    */
   match /users/{userId}/expenses/{expenseId} {
    function isSignedIn() {
     return request.auth != null;
    }
 

    function isOwner(userId) {
     return request.auth.uid == userId;
    }
 

    function isExistingOwner(userId) {
     return isOwner(userId) && resource != null;
    }
 

    allow get: if isOwner(userId);
    allow list: if isOwner(userId);
    allow create: if isOwner(userId) && request.resource.data.userId == userId;
    allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Secure tasks for a user. Only the owner can read/write their own tasks.
    * @path /users/{userId}/tasks/{taskId}
    * @allow (create) - User with UID 'user_abc' can create a task under /users/user_abc/tasks.
    * @allow (get,list,update,delete) - User with UID 'user_abc' can get, list, update, or delete their own tasks under /users/user_abc/tasks.
    * @deny (create) - User with UID 'user_xyz' cannot create a task under /users/user_abc/tasks.
    * @deny (get,list,update,delete) - User with UID 'user_xyz' cannot get, list, update, or delete tasks under /users/user_abc/tasks.
    * @principle Enforces document ownership for reads and writes.
    */
   match /users/{userId}/tasks/{taskId} {
    function isSignedIn() {
     return request.auth != null;
    }
 

    function isOwner(userId) {
     return request.auth.uid == userId;
    }
 

    function isExistingOwner(userId) {
     return isOwner(userId) && resource != null;
    }
 

    allow get: if isOwner(userId);
    allow list: if isOwner(userId);
    allow create: if isOwner(userId) && request.resource.data.userId == userId;
    allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Secure growth data for a specific field. Only the owner of the field can read/write growth data.
    * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
    * @allow (create) - User with UID 'user_abc' can create growth data under /users/user_abc/fields/field_123/growthData if they own the field.
    * @allow (get,list,update,delete) - User with UID 'user_abc' can get, list, update, or delete their own growth data under /users/user_abc/fields/field_123/growthData.
    * @deny (create) - User with UID 'user_xyz' cannot create growth data under /users/user_abc/fields/field_123/growthData.
    * @deny (get,list,update,delete) - User with UID 'user_xyz' cannot get, list, update, or delete growth data under /users/user_abc/fields/field_123/growthData.
    * @principle Enforces document ownership for reads and writes through hierarchical paths.
    */
   match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
    function isSignedIn() {
     return request.auth != null;
    }
 

    function isOwner(userId) {
     return request.auth.uid == userId;
    }
 

    function isExistingOwner(userId) {
     return isOwner(userId) && resource != null;
    }
 

    allow get: if isOwner(userId);
    allow list: if isOwner(userId);
    allow create: if isOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/fields/$(fieldId)).data.userId == userId && request.resource.data.fieldId == fieldId;
    allow update: if isExistingOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/fields/$(fieldId)).data.userId == userId && request.resource.data.fieldId == fieldId;
    allow delete: if isExistingOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/fields/$(fieldId)).data.userId == userId;
   }
 

   /**
    * @description Allow public read access to market price data. Write access is disallowed.
    * @path /marketPrices/{marketPriceId}
    * @allow (get,list) - Any user can read market price data.
    * @deny (create,update,delete) - No user can create, update, or delete market price data.
    * @principle Allows public read access while restricting write access.
    */
   match /marketPrices/{marketPriceId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Secure produce listings created by users. Only the owner can read/write their own listings.
    * @path /users/{userId}/produceListings/{produceListingId}
    * @allow (create) - User with UID 'user_abc' can create a listing under /users/user_abc/produceListings.
    * @allow (get,list,update,delete) - User with UID 'user_abc' can get, list, update, or delete their own listings under /users/user_abc/produceListings.
    * @deny (create) - User with UID 'user_xyz' cannot create a listing under /users/user_abc/produceListings.
    * @deny (get,list,update,delete) - User with UID 'user_xyz' cannot get, list, update, or delete listings under /users/user_abc/produceListings.
    * @principle Enforces document ownership for reads and writes.
    */
   match /users/{userId}/produceListings/{produceListingId} {
    function isSignedIn() {
     return request.auth != null;
    }
 

    function isOwner(userId) {
     return request.auth.uid == userId;
    }
 

    function isExistingOwner(userId) {
     return isOwner(userId) && resource != null;
    }
 

    allow get: if isOwner(userId);
    allow list: if isOwner(userId);
    allow create: if isOwner(userId) && request.resource.data.userId == userId;
    allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Allow any authenticated user to submit feedback.
    * @path /feedbacks/{feedbackId}
    * @allow (create) - Any authenticated user can create a feedback document.
    * @allow (get,list) - Any authenticated user can retrieve a feedback document.
    * @deny (update,delete) - No user can update or delete feedback.
    * @principle Allows public creation while restricting modification.
    */
   match /feedbacks/{feedbackId} {
    function isSignedIn() {
     return request.auth != null;
    }
 

    allow get, list: if isSignedIn();
    allow create: if isSignedIn();
    allow update, delete: if false;
   }
  }
 }