/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * while allowing public read access to market price data.  It leverages
 * path-based authorization and data denormalization to avoid costly `get()`
 * calls and ensure efficient security checks.  Data validation is relaxed in
 * this prototyping phase, focusing on relational integrity for authorization.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, owned by the user.
 * - /users/{userId}/fields/{fieldId}: Stores field data, owned by the user.
 * - /users/{userId}/expenses/{expenseId}: Stores expense data, owned by the user.
 * - /users/{userId}/tasks/{taskId}: Stores task data, owned by the user.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Stores growth data, owned by the user and field.
 * - /marketPrices/{marketPriceId}: Stores market price data, publicly readable.
 * - /users/{userId}/produceListings/{produceListingId}: Stores produce listings, owned by the user.
 *
 * Key Security Decisions:
 * - User-specific data is strictly controlled by the owning user.
 * - Market price data is publicly readable.
 * - Data validation is minimized to focus on authorization and relational integrity.
 * - List operations are secured to prevent unauthorized data access.
 *
 * Denormalization for Authorization:
 * - The `userId` is included in the path for all user-owned data, allowing for
 *   simple ownership checks without `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, list, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - If the user ID in the request does not match the authenticated user's ID.
     * @deny (update, delete) - If the user is not the owner.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Allow the user to read their own profile data
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow the user to create their own profile, enforcing that the userId in the document matches their auth.uid
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Allow the user to update their own profile
      allow update: if isExistingOwner(userId);

      // Allow the user to delete their own profile
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for field documents under a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create, get, list, update, delete) - Authenticated user can only access their own fields.
     * @deny (create, update, delete) - If the user is not the owner.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/fields/{fieldId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Allow the user to read their own field data
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Allow the user to create their own field data
      allow create: if isOwner(userId);

      // Allow the user to update their own field data
      allow update: if isExistingOwner(userId);

      // Allow the user to delete their own field data
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for expense documents under a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create, get, list, update, delete) - Authenticated user can only access their own expenses.
     * @deny (create, update, delete) - If the user is not the owner.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Allow the user to read their own expense data
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Allow the user to create their own expense data
      allow create: if isOwner(userId);

      // Allow the user to update their own expense data
      allow update: if isExistingOwner(userId);

      // Allow the user to delete their own expense data
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for task documents under a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create, get, list, update, delete) - Authenticated user can only access their own tasks.
     * @deny (create, update, delete) - If the user is not the owner.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Allow the user to read their own task data
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Allow the user to create their own task data
      allow create: if isOwner(userId);

      // Allow the user to update their own task data
      allow update: if isExistingOwner(userId);

      // Allow the user to delete their own task data
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for growth data documents under a field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create, get, list, update, delete) - Authenticated user can only access their own growth data.
     * @deny (create, update, delete) - If the user is not the owner.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Allow the user to read their own growth data
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Allow the user to create their own growth data
      allow create: if isOwner(userId);

      // Allow the user to update their own growth data
      allow update: if isExistingOwner(userId);

      // Allow the user to delete their own growth data
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to market price data, with no write access.
     * @path /marketPrices/{marketPriceId}
     * @allow (get, list) - Any user can read market prices.
     * @deny (create, update, delete) - No user can write market prices.
     * @principle Provides public read access to a top-level collection.
     */
    match /marketPrices/{marketPriceId} {
      // Allow anyone to read market price data
      allow get: if true;
      allow list: if true;
    }

    /**
     * @description Enforces access control for produce listings under a user.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create, get, list, update, delete) - Authenticated user can only access their own produce listings.
     * @deny (create, update, delete) - If the user is not the owner.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Allow the user to read their own produce listing data
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Allow the user to create their own produce listing data
      allow create: if isOwner(userId);

      // Allow the user to update their own produce listing data
      allow update: if isExistingOwner(userId);

      // Allow the user to delete their own produce listing data
      allow delete: if isExistingOwner(userId);
    }
  }
}