/**
  * @fileoverview Firestore Security Rules for the application.
  *
  * Core Philosophy:
  * This ruleset enforces a strict user-ownership model for most data,
  * ensuring that users can only access and modify their own data. Market price data is publicly readable.
  *
  * Data Structure:
  * - User profiles are stored in `/users/{userId}`.
  * - User-specific data (fields, expenses, tasks, produce listings) are stored
  *   under the corresponding `/users/{userId}` path.
  * - Growth data is nested under `/users/{userId}/fields/{fieldId}`.
  * - Market price data is stored in the top-level `/marketPrices/{marketPriceId}` collection.
  *
  * Key Security Decisions:
  * - User listing is disallowed to protect user privacy.
  * - All user-owned data is strictly controlled by the `userId` in the path.
  * - Market price data is publicly readable to facilitate information sharing.
  *
  * Denormalization for Authorization:
  * The `userId` field in subcollections (fields, expenses, tasks, produce listings)
  * is used for authorization and must match the `userId` in the path. This
  * avoids the need for expensive `get()` calls to verify ownership.
  *
  * Structural Segregation:
  * Different data types are stored in separate collections to simplify security
  * rules and prevent mixing public and private data.
  */
 

 rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

   /**
    * @description Rule for user profiles.  Allows a user to read and write their own profile.
    * @path /users/{userId}
    * @allow (create) - User with UID 'user_abc' can create their profile with ID 'user_abc'.
    * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their profile with ID 'user_abc'.
    * @deny (create) - User with UID 'user_def' cannot create a profile with ID 'user_abc'.
    * @deny (get, update, delete) - User with UID 'user_def' cannot read, update, or delete the profile with ID 'user_abc'.
    * @principle Enforces document ownership for writes.
    */
   match /users/{userId} {
    // Only signed-in users can access user profiles.
    allow get: if isSignedIn() && isOwner(userId);
    allow list: if false; // Disallow listing all users.
    allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
    allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
    allow delete: if isSignedIn() && isExistingOwner(userId);
   }
 

   /**
    * @description Rule for fields under a user.  Allows a user to manage their own fields.
    * @path /users/{userId}/fields/{fieldId}
    * @allow (create) - User with UID 'user_abc' can create a field under /users/user_abc/fields/field_123.
    * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete fields under /users/user_abc.
    * @deny (create) - User with UID 'user_def' cannot create a field under /users/user_abc/fields/field_123.
    * @deny (get, list, update, delete) - User with UID 'user_def' cannot read, list, update, or delete fields under /users/user_abc.
    * @principle Enforces document ownership for writes, validates userId on create, and enforces immutability on update.
    */
   match /users/{userId}/fields/{fieldId} {
    // Only the owner can manage their fields.
    allow get: if isSignedIn() && isOwner(userId);
    allow list: if isSignedIn() && isOwner(userId);
    allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
    allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
    allow delete: if isSignedIn() && isExistingOwner(userId);
   }
 

   /**
    * @description Rule for expenses under a user.  Allows a user to manage their own expenses.
    * @path /users/{userId}/expenses/{expenseId}
    * @allow (create) - User with UID 'user_abc' can create an expense under /users/user_abc/expenses/expense_123.
    * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete expenses under /users/user_abc.
    * @deny (create) - User with UID 'user_def' cannot create an expense under /users/user_abc/expenses/expense_123.
    * @deny (get, list, update, delete) - User with UID 'user_def' cannot read, list, update, or delete expenses under /users/user_abc.
    * @principle Enforces document ownership for writes, validates userId on create, and enforces immutability on update.
    */
   match /users/{userId}/expenses/{expenseId} {
    // Only the owner can manage their expenses.
    allow get: if isSignedIn() && isOwner(userId);
    allow list: if isSignedIn() && isOwner(userId);
    allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
    allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
    allow delete: if isSignedIn() && isExistingOwner(userId);
   }
 

   /**
    * @description Rule for tasks under a user.  Allows a user to manage their own tasks.
    * @path /users/{userId}/tasks/{taskId}
    * @allow (create) - User with UID 'user_abc' can create a task under /users/user_abc/tasks/task_123.
    * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete tasks under /users/user_abc.
    * @deny (create) - User with UID 'user_def' cannot create a task under /users/user_abc/tasks/task_123.
    * @deny (get, list, update, delete) - User with UID 'user_def' cannot read, list, update, or delete tasks under /users/user_abc.
    * @principle Enforces document ownership for writes, validates userId on create, and enforces immutability on update.
    */
   match /users/{userId}/tasks/{taskId} {
    // Only the owner can manage their tasks.
    allow get: if isSignedIn() && isOwner(userId);
    allow list: if isSignedIn() && isOwner(userId);
    allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
    allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
    allow delete: if isSignedIn() && isExistingOwner(userId);
   }
 

   /**
    * @description Rule for growth data under a field.  Allows a user to manage growth data for their own fields.
    * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
    * @allow (create) - User with UID 'user_abc' can create growth data under /users/user_abc/fields/field_123/growthData/growth_data_123.
    * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete growth data under /users/user_abc/fields/field_123.
    * @deny (create) - User with UID 'user_def' cannot create growth data under /users/user_abc/fields/field_123/growthData/growth_data_123.
    * @deny (get, list, update, delete) - User with UID 'user_def' cannot read, list, update, or delete growth data under /users/user_abc/fields/field_123.
    * @principle Enforces document ownership for writes, validates fieldId on create, and enforces immutability on update.
    */
   match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
    // Only the owner can manage growth data for their fields.
    allow get: if isSignedIn() && isOwner(userId);
    allow list: if isSignedIn() && isOwner(userId);
    allow create: if isSignedIn() && isOwner(userId) && request.resource.data.fieldId == fieldId;
    allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.fieldId == resource.data.fieldId;
    allow delete: if isSignedIn() && isExistingOwner(userId);
   }
 

   /**
    * @description Rule for market prices.  Allows anyone to read market prices, but no one to create, update, or delete them.
    * @path /marketPrices/{marketPriceId}
    * @allow (get, list) - Any user (signed in or not) can read and list market prices.
    * @deny (create, update, delete) - No one can create, update, or delete market prices.
    * @principle Public read access with no write access.
    */
   match /marketPrices/{marketPriceId} {
    // Market prices are publicly readable.
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Rule for produce listings under a user.  Allows a user to manage their own produce listings.
    * @path /users/{userId}/produceListings/{produceListingId}
    * @allow (create) - User with UID 'user_abc' can create a produce listing under /users/user_abc/produceListings/produce_listing_123.
    * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete produce listings under /users/user_abc.
    * @deny (create) - User with UID 'user_def' cannot create a produce listing under /users/user_abc/produceListings/produce_listing_123.
    * @deny (get, list, update, delete) - User with UID 'user_def' cannot read, list, update, or delete produce listings under /users/user_abc.
    * @principle Enforces document ownership for writes, validates userId on create, and enforces immutability on update.
    */
   match /users/{userId}/produceListings/{produceListingId} {
    allow get: if isSignedIn() && isOwner(userId);
    allow list: if isSignedIn() && isOwner(userId);
    allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
    allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
    allow delete: if isSignedIn() && isExistingOwner(userId);
   }
 

   // Helper functions
   function isSignedIn() {
    return request.auth != null;
   }
 

   function isOwner(userId) {
    return request.auth.uid == userId;
   }
 

   function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
   }
  }
 }