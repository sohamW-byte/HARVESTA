rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' can read their profile.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their profile.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their profile.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     *       request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      //Utility function for checking user authentication
      function isSignedIn() {
        return request.auth != null;
      }
      //Utility function for checking user ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       //Utility function for checking existing ownership
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }
      // Read rules
      allow get: if isOwner(userId);
      allow list: if false;

      // Write rules
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to field data associated with a user.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) User with ID 'user123' can create a field.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' can read a field.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update a field.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete a field.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a field for user 'user123'.
     *       request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/fields/{fieldId} {
      //Utility function for checking user ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       //Utility function for checking existing ownership
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to expense records associated with a user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with ID 'user123' can create an expense.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' can read an expense.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update an expense.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete an expense.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create an expense for user 'user123'.
     *       request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/expenses/{expenseId} {
       //Utility function for checking user ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       //Utility function for checking existing ownership
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks associated with a user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with ID 'user123' can create a task.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' can read a task.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update a task.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete a task.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a task for user 'user123'.
     *       request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
       //Utility function for checking user ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       //Utility function for checking existing ownership
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to growth data for a specific field.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) User with ID 'user123' can create growth data.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' can read growth data.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update growth data.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete growth data.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create growth data for user 'user123'.
     *       request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
       //Utility function for checking user ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       //Utility function for checking existing ownership
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow (get) Any user can read market price data.
     *        true
     * @allow (list) Any user can list market price data.
     *        true
     * @deny (create) No user can create market price data.
     *       false
     * @deny (update) No user can update market price data.
     *       false
     * @deny (delete) No user can delete market price data.
     *       false
     * @principle Allows public read access, denies all writes.
     */
    match /marketPrices/{marketPriceId} {
      // Read rules
      allow get: if true;
      allow list: if true;

      // Write rules
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to produce listings created by users.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) User with ID 'user123' can create a produce listing.
     *        request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' can read a produce listing.
     *        request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update a produce listing.
     *        request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete a produce listing.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a produce listing for user 'user123'.
     *       request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/produceListings/{produceListingId} {
       //Utility function for checking user ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       //Utility function for checking existing ownership
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}