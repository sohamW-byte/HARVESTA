/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data, combined with public read access for certain global collections.
 * Data is segregated into collections based on type and access requirements.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; only accessible by the user themselves.
 * - /users/{userId}/fields/{fieldId}: Stores field data; only accessible by the user who owns the field.
 * - /users/{userId}/expenses/{expenseId}: Stores expense data; only accessible by the user who owns the expense.
 * - /users/{userId}/tasks/{taskId}: Stores task data; only accessible by the user who owns the task.
 * - /users/{userId}/fields/{fieldId}/growthData/{growthDataId}: Stores growth data for fields; only accessible by the user who owns the field.
 * - /marketPrices/{marketPriceId}: Stores market price data; publicly readable.
 * - /users/{userId}/produceListings/{produceListingId}: Stores produce listings; only accessible by the user who created the listing.
 * - /feedbacks/{feedbackId}: Stores user feedback; writeable by any authenticated user; publicly readable.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's ID in the path.
 * - Public read access is granted to the `/marketPrices` collection.
 * - Feedback can be submitted by any authenticated user but is not updatable or deletable.
 * - Listing of user documents is allowed, since the path implies ownership.
 *
 * Denormalization for Authorization:
 *  - The 'userId' is present in subcollection documents to ensure that the data in the document is from the user that matches the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, ensuring only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (create) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create their own profile.
     * @allow (get) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can get their own profile.
     * @allow (update) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can update their own profile.
     * @allow (delete) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can delete their own profile.
     * @deny (create) User 'anotherUserId' cannot create a profile under 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2'.
     * @principle Enforces document ownership for all operations.  Requires the user to be signed in.  Validates that the userId in the path matches the authenticated user's ID.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to field data, allowing only the owner to read and write.
     * @path /users/{userId}/fields/{fieldId}
     * @allow (create) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create a field under their user ID.
     * @allow (get) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can get a field under their user ID.
     * @allow (update) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can update a field under their user ID.
     * @allow (delete) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can delete a field under their user ID.
     * @deny (create) User 'anotherUserId' cannot create a field under user 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2'.
     * @principle Enforces document ownership and signed-in status for all write operations.
     */
    match /users/{userId}/fields/{fieldId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to expense records, ensuring only the owner can manage them.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create an expense record under their user ID.
     * @allow (get) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can get an expense record under their user ID.
     * @allow (update) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can update an expense record under their user ID.
     * @allow (delete) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can delete an expense record under their user ID.
     * @deny (create) User 'anotherUserId' cannot create an expense record under user 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2'.
     * @principle Enforces document ownership and signed-in status for all write operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to tasks, restricting access to the task owner.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create a task under their user ID.
     * @allow (get) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can get a task under their user ID.
     * @allow (update) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can update a task under their user ID.
     * @allow (delete) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can delete a task under their user ID.
     * @deny (create) User 'anotherUserId' cannot create a task under user 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures growth data, allowing only the owner of the parent field to access it.
     * @path /users/{userId}/fields/{fieldId}/growthData/{growthDataId}
     * @allow (create) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create growth data under their field.
     * @allow (get) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can get growth data under their field.
     * @allow (update) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can update growth data under their field.
     * @allow (delete) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can delete growth data under their field.
     * @deny (create) User 'anotherUserId' cannot create growth data under user 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2'.
     * @principle Enforces hierarchical ownership.
     */
    match /users/{userId}/fields/{fieldId}/growthData/{growthDataId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Provides public read access to market price data.
     * @path /marketPrices/{marketPriceId}
     * @allow (get) Any user can get market price data.
     * @allow (list) Any user can list market price data.
     * @deny (create) No one can create market price data (admin only via backend).
     * @deny (update) No one can update market price data (admin only via backend).
     * @deny (delete) No one can delete market price data (admin only via backend).
     * @principle Allows public reads but restricts writes to authorized users (e.g., backend admins).
     */
    match /marketPrices/{marketPriceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to produce listings, restricting access to the listing owner.
     * @path /users/{userId}/produceListings/{produceListingId}
     * @allow (create) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can create a produce listing under their user ID.
     * @allow (get) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can get a produce listing under their user ID.
     * @allow (update) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can update a produce listing under their user ID.
     * @allow (delete) User 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2' can delete a produce listing under their user ID.
     * @deny (create) User 'anotherUserId' cannot create a produce listing under user 'cEaZX6lta8aq6kwCfVpdmvoN0Ob2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/produceListings/{produceListingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to submit feedback.
     * @path /feedbacks/{feedbackId}
     * @allow (create) Any signed-in user can create a feedback entry.
     * @allow (get) Any user can read a feedback entry.
     * @allow (list) Any user can list feedback entries.
     * @deny (update) No one can update feedback.
     * @deny (delete) No one can delete feedback.
     * @principle Allows public reads and authenticated writes for feedback submissions.
     */
    match /feedbacks/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}