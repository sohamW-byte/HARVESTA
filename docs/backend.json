{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user profile in the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number."
        },
        "region": {
          "type": "string",
          "description": "User's region or location."
        },
        "cropsGrown": {
          "type": "array",
          "description": "List of crops grown by the user.",
          "items": {
            "type": "string"
          }
        },
        "role": {
          "type": "string",
          "description": "The role of the user.",
          "enum": [
            "farmer",
            "buyer",
            "admin"
          ]
        },
        "farmerId": {
          "type": "string",
          "description": "Government-issued Farmer ID, required if role is 'farmer'."
        },
        "gstNumber": {
          "type": "string",
          "description": "GST Number, required if role is 'buyer'."
        }
      },
      "required": [
        "id",
        "email",
        "name",
        "role"
      ]
    },
    "Field": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Field",
      "type": "object",
      "description": "Represents a field with its associated data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the field."
        },
        "name": {
          "type": "string",
          "description": "Name of the field."
        },
        "cropType": {
          "type": "string",
          "description": "Type of crop planted in the field."
        },
        "healthStatus": {
          "type": "string",
          "description": "Current health status of the field (e.g., Good, Fair, Poor)."
        },
        "plantingDate": {
          "type": "string",
          "description": "Date when the crop was planted.",
          "format": "date-time"
        },
        "harvestDate": {
          "type": "string",
          "description": "Expected or actual harvest date.",
          "format": "date-time"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Field)"
        }
      },
      "required": [
        "id",
        "name",
        "cropType",
        "healthStatus",
        "plantingDate",
        "harvestDate",
        "userId"
      ]
    },
    "Expense": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Expense",
      "type": "object",
      "description": "Represents an expense record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the expense."
        },
        "amount": {
          "type": "number",
          "description": "Amount of the expense."
        },
        "type": {
          "type": "string",
          "description": "Type of expense (e.g., Fertilizer, Labor)."
        },
        "date": {
          "type": "string",
          "description": "Date when the expense was incurred.",
          "format": "date-time"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Expense)"
        }
      },
      "required": [
        "id",
        "amount",
        "type",
        "date",
        "userId"
      ]
    },
    "Task": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Task",
      "type": "object",
      "description": "Represents a task to be completed.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the task."
        },
        "title": {
          "type": "string",
          "description": "Title of the task."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the task."
        },
        "status": {
          "type": "string",
          "description": "Current status of the task (e.g., To Do, In Progress, Completed)."
        },
        "date": {
          "type": "string",
          "description": "Due date or target date for the task.",
          "format": "date-time"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Task)"
        }
      },
      "required": [
        "id",
        "title",
        "status",
        "date",
        "userId"
      ]
    },
    "GrowthData": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GrowthData",
      "type": "object",
      "description": "Represents growth data for a specific field.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the growth data entry."
        },
        "fieldId": {
          "type": "string",
          "description": "Reference to Field. (Relationship: Field 1:N GrowthData)"
        },
        "date": {
          "type": "string",
          "description": "Date when the growth data was recorded.",
          "format": "date-time"
        },
        "height": {
          "type": "number",
          "description": "Height of the crop at the time of measurement."
        },
        "biomass": {
          "type": "number",
          "description": "Biomass of the crop at the time of measurement."
        },
        "leafArea": {
          "type": "number",
          "description": "Leaf area of the crop at the time of measurement."
        }
      },
      "required": [
        "id",
        "fieldId",
        "date",
        "height",
        "biomass",
        "leafArea"
      ]
    },
    "MarketPrice": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MarketPrice",
      "type": "object",
      "description": "Represents market price data for a specific crop.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the market price entry."
        },
        "cropName": {
          "type": "string",
          "description": "Name of the crop."
        },
        "marketPrice": {
          "type": "number",
          "description": "Current market price for the crop."
        },
        "location": {
          "type": "string",
          "description": "Location where the price is applicable."
        },
        "lastUpdated": {
          "type": "string",
          "description": "Date and time when the price was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "cropName",
        "marketPrice",
        "location",
        "lastUpdated"
      ]
    },
    "ProduceListing": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProduceListing",
      "type": "object",
      "description": "Represents a listing of produce for sale.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the produce listing."
        },
        "cropName": {
          "type": "string",
          "description": "Name of the crop being listed."
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the crop available for sale."
        },
        "price": {
          "type": "number",
          "description": "Price of the crop per unit."
        },
        "contactInfo": {
          "type": "string",
          "description": "Contact information for the seller."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N ProduceListing)"
        }
      },
      "required": [
        "id",
        "cropName",
        "quantity",
        "price",
        "contactInfo",
        "userId"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information.  Path-based ownership for private user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/fields/{fieldId}",
        "definition": {
          "entityName": "Field",
          "schema": {
            "$ref": "#/backend/entities/Field"
          },
          "description": "Stores field data associated with a user. Path-based ownership enforced via userId.  Includes 'userId' to ensure ownership integrity.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "fieldId",
              "description": "The unique identifier for the field."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/expenses/{expenseId}",
        "definition": {
          "entityName": "Expense",
          "schema": {
            "$ref": "#/backend/entities/Expense"
          },
          "description": "Stores expense records associated with a user. Path-based ownership enforced via userId. Includes 'userId' to ensure ownership integrity.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "expenseId",
              "description": "The unique identifier for the expense."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores tasks associated with a user. Path-based ownership enforced via userId. Includes 'userId' to ensure ownership integrity.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "taskId",
              "description": "The unique identifier for the task."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/fields/{fieldId}/growthData/{growthDataId}",
        "definition": {
          "entityName": "GrowthData",
          "schema": {
            "$ref": "#/backend/entities/GrowthData"
          },
          "description": "Stores growth data for a specific field. Hierarchical path enforces ownership. Includes 'fieldId' to ensure relationship integrity.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "fieldId",
              "description": "The unique identifier for the field."
            },
            {
              "name": "growthDataId",
              "description": "The unique identifier for the growth data entry."
            }
          ]
        }
      },
      {
        "path": "/marketPrices/{marketPriceId}",
        "definition": {
          "entityName": "MarketPrice",
          "schema": {
            "$ref": "#/backend/entities/MarketPrice"
          },
          "description": "Stores market price data for different crops.  This is a global collection with no user-specific ownership.  Consider adding region as a field to enable filtering.",
          "params": [
            {
              "name": "marketPriceId",
              "description": "The unique identifier for the market price entry."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/produceListings/{produceListingId}",
        "definition": {
          "entityName": "ProduceListing",
          "schema": {
            "$ref": "#/backend/entities/ProduceListing"
          },
          "description": "Stores produce listings created by users. Path-based ownership enforced via userId. Includes 'userId' to ensure ownership integrity.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "produceListingId",
              "description": "The unique identifier for the produce listing."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to ensure security, scalability, and ease of debugging, adhering to the core design principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). It leverages Structural Segregation and Access Modeling for clarity.\n\nAuthorization Independence is achieved through denormalization. For instance, all user-owned data (fields, expenses, tasks, produce listings) are stored under the `/users/{userId}` path, eliminating the need for `get()` calls in security rules to verify ownership. Similarly, if collaborative features were added (e.g., shared fields), the members map would be denormalized into the documents needing authorization context.\n\nStructural Segregation is implemented by separating different data types into distinct collections. User profiles are stored in `/users/{userId}`, fields in `/users/{userId}/fields/{fieldId}`, expenses in `/users/{userId}/expenses/{expenseId}`, tasks in `/users/{userId}/tasks/{taskId}`, growth data in `/users/{userId}/fields/{fieldId}/growthData/{growthDataId}` and produce listings in `/users/{userId}/produceListings/{produceListingId}`. This segregation ensures that security rules can be applied consistently to all documents within a collection.\n\nAccess Modeling follows consistent patterns. Private user data resides under `/users/{userId}`, enforcing path-based ownership. Hierarchical paths (e.g., `/users/{userId}/fields/{fieldId}/growthData/{growthDataId}`) are used for nested data, ensuring efficient and secure access control.  Collaborative data would use a membership map denormalized at the document level.\n\nThis structure supports QAPs by ensuring that list operations are secure. Because ownership is explicit in the path, rules can efficiently filter based on `request.auth.uid` without needing to inspect document contents. The segregation of data types also prevents mixing public and private data in the same collection, which could complicate list operations.\n\nInvariants such as ownership are maintained by enforcing that the `userId` field matches the `userId` in the path. Timestamps (if added) can be enforced via rules as well. Denormalized data integrity is ensured by cloud functions triggered on changes to parent documents, updating the corresponding fields in subcollections to reflect those changes."
  }
}
